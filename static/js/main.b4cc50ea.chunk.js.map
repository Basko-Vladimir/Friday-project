{"version":3,"sources":["main/UI/Header/Header.module.scss","main/UI/common/Paginator/Paginator.module.scss","main/UI/common/Table/Table.module.scss","main/UI/common/Modal/Modal.module.scss","features/Sign-In/UI/SignIn.module.scss","main/UI/common/LoadingToggle/Loading.module.scss","features/Sign-Up/UI/SignUp.module.scss","main/UI/common/Search/Search.module.scss","main/UI/common/NewInput/NewInput.module.scss","main/UI/common/Button/Button.module.scss","main/UI/common/Input/Input.module.css","features/Set-New-Pass/UI/SetNewPass.module.scss","features/Forgot/UI/Forgot.module.scss","main/UI/common/Table/ColumnsHeaders/ColumnsHeaders.module.scss","features/Packs/UI/DeletePackModal/DeletePackModal.module.scss","features/Sign-In/DAL/signInAPI.ts","features/Sign-In/LS-service/localStorage.ts","features/Sign-Up/BLL/SignUpTypes.ts","features/Sign-Up/DAL/SignUpAPI.ts","features/Sign-Up/BLL/SignUpReducer.ts","main/BLL/appReducer.ts","features/Sign-In/BLL/signInReducer.ts","main/UI/common/NewInput/NewInput.tsx","main/UI/common/Button/Button.tsx","main/UI/common/Modal/Modal.tsx","main/UI/common/MessageModal/MessageModal.tsx","features/Sign-In/UI/SignIn.tsx","main/UI/common/LoadingToggle/Loading.tsx","features/Sign-In/UI/SignInContainer.tsx","main/UI/common/Input/Input.tsx","features/Sign-Up/UI/SignUp.tsx","features/Set-New-Pass/UI/SetNewPass.tsx","features/Set-New-Pass/DAL/setNewPassAPI.ts","features/Set-New-Pass/BLL/setNewPassReducer.ts","features/Set-New-Pass/UI/SetNewPassContainer.tsx","features/Profile/Profile.tsx","features/Forgot/UI/Forgot.tsx","features/Forgot/DAL/forgotAPI.ts","features/Forgot/BLL/forgotReducer.ts","features/Forgot/UI/ForgotContainer.tsx","main/UI/common/Table/ColumnsHeaders/ColumnsHeaders.tsx","main/UI/common/Table/Table.tsx","features/Packs/DAL/packsAPI.ts","features/Packs/BLL/packsReducer.ts","main/UI/common/Search/Search.tsx","main/UI/common/Paginator/Paginator.tsx","features/Packs/UI/AddPackModal/AddPackModal.tsx","features/Packs/UI/ChangePackModal/ChangePackModal.tsx","features/Packs/UI/DeletePackModal/DeletePackModal.tsx","features/Packs/UI/Packs.tsx","features/Cards/DAL/cardsAPI.ts","features/Cards/BLL/cardsReducer.ts","features/Cards/UI/AddCardModal/AddCardModal.tsx","features/Cards/UI/ChangeCardModal/ChangeCardModal.tsx","features/Cards/UI/Cards.tsx","main/UI/Routes/Routes.tsx","main/UI/Header/Header.tsx","App.tsx","serviceWorker.ts","main/BLL/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","then","res","data","token","setItemToLS","key","value","localStorage","setItem","JSON","stringify","getItemFromLS","getItem","parse","SIGN_UP_ERROR","IS_LOADING","SignUpAPI","a","response","initialState","isLoading","message","signUpSuccess","type","SignUpError","errorMessage","SET_MESSAGE_TEXT","SET_INITIALIZE","isInitialized","setMessageText","messageText","SET_USER_DATA","LOGIN_SUCCESS","isAuth","userData","setUserData","loginSuccess","setAuthMe","dispatch","NewInput","React","memo","error","onChangeHandler","onChange","props","className","styles","input","e","currentTarget","Button","title","button","Modal","modalSize","isResponseError","children","isShow","hideModal","modalClass","modal","background","onClick","style","MessageModal","actionCreator","useDispatch","closeMessage","useCallback","Boolean","SignIn","isRemember","changePass","changeEmail","changeIsRemember","sendFormData","onSubmit","form","placeholder","to","FORGOT_PATH","forgotLink","checkbox","checked","SIGN_UP_PATH","Loading","useState","points","setPoints","useSelector","state","signUp","useEffect","id","setTimeout","length","clearTimeout","s","body","hide","loadingProgress","SignInContainer","app","signIn","setEmail","setPassword","setIsRemember","preventDefault","login","PROFILE_PATH","Input","changeInput","SignUp","firstPass","secondPass","setFirstPass","setLogin","setSecondPass","registerMe","similar","wrongPassword","responseMessage","container","inputs","SignUpContainer","setSimilar","SIGN_IN_PATH","success","SetNewPass","passwordRepeat","sendNewPassword","changePassword","changePasswordRepeat","setNewPassAPI","resetPasswordToken","SET_NEW_PASS_SUCCESS","newPassSuccess","SetNewPassContainer","redirect","setRedirect","setPasswordRepeat","setNewPass","resetToken","useParams","isSuccess","setNewPassword","Profile","firstRendering","setFirstRendering","created","String","isAdmin","name","publicCardPacksCount","tokenDeathTime","updated","verified","__v","_id","Forgot","sendEmail","forgotAPI","html1","html2","SET_FORGOT_SUCCESS","forgotSuccess","ForgotContainer","forgot","onSendEmail","ColumnsHeaders","sortInc","setSort","sortDirection","columnsHeaders","getItems","showModal","onSetSort","property","textContent","replace","typeSort","toLowerCase","innerHTML","headers","map","header","i","Table","rows","tableModel","table","row","CARDS_PATH","grade","buttonColumn","question","answer","packsAPI","sortParams","pageCount","page","get","packName","cardsPack","packId","newName","put","idPack","delete","SET_PACKS","UPDATE_PACK","SET_NEW_PAGE","packs","setPacks","getPacks","cardPacks","Search","setQuery","searchQuery","toSearch","toReset","searchArea","marginRight","SearchContainer","setSearchQuery","result","filter","match","RegExp","Paginator","currentPage","setPage","disableLeftBtn","disableRightBtn","lastPage","b4Call","b1Call","b1","b2","b3","b4","showSpan","arrowsCall","arrow","disabled","toString","PaginatorContainer","btns","setBtns","btns2","setBtns2","setShowSpan","setIsB4","setIsB1","setDisableLeftBtn","setDisableRightBtn","btn","newPage","getPacksNew","dir","AddPackModal","modalType","addPack","setName","autoFocus","ChangePackModal","onChangePack","currentPackName","DeletePackModal","deletePack","buttonsBlock","Packs","currentPackId","setCurrentPackId","setCurrentPackName","setModalType","onGetPacks","newPack","updatedCardsPack","changePack","onAddPack","onDeletePack","display","flexDirection","alignItems","cardsAPI","card","cardsPack_id","cardId","SET_CARDS","UPDATE_CARD","cards","updateCardAC","newCard","getCards","AddCardModal","addCard","setQuestion","setAnswer","width","height","marginBottom","ChangeCardModal","changeCard","currentQuestion","currentAnswer","Cards","currentCardId","setCurrentCardId","setCurrentQuestion","setCurrentAnswer","onGetCards","onChangeCard","updatedCard","onAddCard","deletedCard","deleteCard","Routes","path","render","exact","Header","navMenu","activeClassName","active","signOut","App","window","location","hostname","rootReducer","combineReducers","action","p","c","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.b4cc50ea.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__d8TJ1\",\"navMenu\":\"Header_navMenu__XmOBE\",\"active\":\"Header_active__3NrMy\",\"signOut\":\"Header_signOut__uE1AS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Paginator_container__-8AIP\",\"arrow\":\"Paginator_arrow__afc1Q\",\"button\":\"Paginator_button__54szc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"Table_table__3fQUw\",\"headers\":\"Table_headers__17WSi\",\"rows\":\"Table_rows__1I5AT\",\"row\":\"Table_row__1tWSm\",\"buttonColumn\":\"Table_buttonColumn__3bNaJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Modal_background__eUFto\",\"modal\":\"Modal_modal__1EsS3\",\"error\":\"Modal_error__xizAK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SignIn_form__o7Htx\",\"checkbox\":\"SignIn_checkbox__3Ub6U\",\"background\":\"SignIn_background__11NxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Loading_body__5qWIK\",\"loadingProgress\":\"Loading_loadingProgress__149ZI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SignUp_container__29LBU\",\"inputs\":\"SignUp_inputs__1TLkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Search_container__7ghzK\",\"searchArea\":\"Search_searchArea__38Whk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"NewInput_input__2Agb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2gVcE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3ZTlA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SetNewPass_form__JPazo\",\"background\":\"SetNewPass_background__1F51k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Forgot_form__2ccYz\",\"background\":\"Forgot_background__3Hif5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headers\":\"ColumnsHeaders_headers__3lseU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonsBlock\":\"DeletePackModal_buttonsBlock__1JrRo\"};","import axios from 'axios';\r\nimport {UserDataType} from '../types/ResponseSuccessTypes';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\n\r\nexport const authAPI = {\r\n    login (email: string, password: string, rememberMe: boolean = false ) {\r\n        return instance.post<UserDataType>('/auth/login', {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n\r\n    authMe (token: string) {\r\n       return instance.post<UserDataType>('/auth/me', {token})\r\n            .then(res => res.data);\r\n    }\r\n};\r\n","\r\n\r\nexport const setItemToLS = (key: string, value: any) => {\r\n   localStorage.setItem(key, JSON.stringify(value));\r\n};\r\n\r\nexport const getItemFromLS= (key: string): string | undefined => {\r\n    const value = localStorage.getItem(key);\r\n    if (value) return JSON.parse(value);\r\n};","import React from \"react\";\r\n\r\n\r\nexport const SIGN_UP_SUCCESS = 'SignUpReducer/SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_ERROR = 'SignUpReducer/SIGN_UP_ERROR';\r\nexport const IS_LOADING = 'SignUpReducer/IS_LOADING';\r\n\r\n// Типизация SignUp.tsx\r\nexport type SignUpPropsType = {\r\n    login: string\r\n    setLogin: (value: string) => void\r\n    firstPass: string\r\n    setFirstPass: (value: string) => void\r\n    secondPass: string\r\n    setSecondPass: (value: string) => void\r\n    similar: boolean\r\n    registerMe: (e: React.MouseEvent) => void\r\n    responseMessage: string\r\n    wrongPassword: (e: React.MouseEvent) => void\r\n    isLoading: (value: boolean) => IsLoadingACType\r\n}\r\n\r\n\r\n\r\nexport type SignUpSuccessType = {\r\n    type: typeof SIGN_UP_SUCCESS\r\n    signUpSuccess: boolean\r\n}\r\nexport type SignUpErrorType = {\r\n    type: typeof SIGN_UP_ERROR\r\n    errorMessage: string\r\n}\r\nexport type IsLoadingACType = {\r\n    type: typeof IS_LOADING\r\n    value: boolean\r\n}\r\n\r\n\r\n\r\n\r\nexport type ChatActionTypes = SignUpSuccessType | SignUpErrorType | IsLoadingACType","import axios from \"axios\";\r\n\r\nexport const baseURL = 'https://cards-nya-back.herokuapp.com/1.0/';\r\n\r\nexport const instance = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport type SignUpType =  {\r\n    success: boolean\r\n    error: string\r\n}\r\n\r\nexport const SignUpAPI = {\r\n    SignUpAPI: async (email: string, password: string) => {\r\n        const response = await instance.post<SignUpType>('/auth/register', {email, password});\r\n        return response.data;\r\n    }\r\n\r\n};","import {\r\n    ChatActionTypes, IS_LOADING,\r\n    IsLoadingACType,\r\n    SIGN_UP_ERROR,\r\n    SIGN_UP_SUCCESS,\r\n    SignUpErrorType,\r\n    SignUpSuccessType\r\n} from \"./SignUpTypes\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SignUpAPI} from \"../DAL/SignUpAPI\";\r\n\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    message: '',\r\n    signUpSuccess: false\r\n};\r\n\r\ntype StateType = typeof initialState;\r\n\r\nexport const SingUpReducer = (state: StateType = initialState, action: any): StateType => {\r\n    switch (action.type) {\r\n        case SIGN_UP_SUCCESS:\r\n            return {...state, message: 'done!', signUpSuccess: action.signUpSuccess};\r\n        case SIGN_UP_ERROR:\r\n            return {...state, message: action.errorMessage};\r\n        case IS_LOADING:\r\n            return {\r\n                ...state, isLoading: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const isLoading = (value: boolean):IsLoadingACType => ({type: IS_LOADING, value});\r\n\r\nconst SignUpSuccess = (signUpSuccess: boolean)\r\n    : SignUpSuccessType => ({type: SIGN_UP_SUCCESS, signUpSuccess});\r\nexport const SignUpError = (errorMessage: string)\r\n    : SignUpErrorType => ({type: SIGN_UP_ERROR, errorMessage});\r\n\r\n// Thunks\r\n\r\nexport const signUpTC = (email:string, password:string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n    debugger\r\n        try {\r\n            dispatch(isLoading(true));\r\n            const data = await SignUpAPI.SignUpAPI(email, password);\r\n            if(data.error) {\r\n                dispatch(SignUpError(data.error));\r\n            } else\r\n                dispatch(SignUpSuccess(data.success))\r\n        } catch (e) {\r\n            dispatch(SignUpError(e.response.data.error))\r\n        }\r\n        dispatch(isLoading(false));\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n","import {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType} from './store';\r\nimport {setAuthMe} from '../../features/Sign-In/BLL/signInReducer';\r\nimport {isLoading} from '../../features/Sign-Up/BLL/SignUpReducer';\r\nimport {IsLoadingACType} from '../../features/Sign-Up/BLL/SignUpTypes';\r\n\r\nconst SET_MESSAGE_TEXT = 'cards/signInReducer/SET_MESSAGE_TEXT';\r\nconst SET_INITIALIZE = 'cards/signInReducer/SET_INITIALIZE';\r\n\r\nconst initialState = {\r\n    message: '',\r\n    isInitialized: false\r\n};\r\n\r\nexport type StateType = typeof initialState;\r\ntype ActionsType = SetMessageTextType | SetInitializeType | IsLoadingACType;\r\n\r\nexport const appReducer = (state: StateType = initialState, action: ActionsType): StateType => {\r\n    switch (action.type) {\r\n        case SET_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                message: action.messageText\r\n            };\r\n        case SET_INITIALIZE:\r\n            return {\r\n                ...state,\r\n                isInitialized: true\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type SetMessageTextType = ReturnType<typeof setMessageText>;\r\nexport const setMessageText = (messageText: string) => ({type: SET_MESSAGE_TEXT, messageText} as const);\r\n\r\ntype SetInitializeType = ReturnType<typeof setInitialize>;\r\nconst setInitialize = () => ({type: SET_INITIALIZE} as const);\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>;\r\n\r\nexport const initializeApp = ():ThunkType  => async (dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        await dispatch(setAuthMe(''));\r\n        dispatch(setInitialize())\r\n    } catch (e) {\r\n        setMessageText(e.response.data.error)\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../DAL/signInAPI';\r\nimport {UserDataType} from '../types/ResponseSuccessTypes';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {setItemToLS} from '../LS-service/localStorage';\r\nimport {SetMessageTextType, setMessageText} from '../../../main/BLL/appReducer';\r\nimport {isLoading} from '../../Sign-Up/BLL/SignUpReducer';\r\nimport {IsLoadingACType} from '../../Sign-Up/BLL/SignUpTypes';\r\n\r\nconst SET_USER_DATA = 'cards/signInReducer/SET_USER_DATA';\r\nconst LOGIN_SUCCESS = 'cards/signInReducer/LOGIN_SUCCESS';\r\n\r\nconst initialState = {\r\n    isAuth: false,\r\n    userData: null as UserDataType | null,\r\n};\r\n\r\nexport type StateType = typeof initialState;\r\n\r\nexport const signInReducer = (state: StateType = initialState, action: ActionsTypes): StateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userData: action.userData\r\n            };\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsTypes = SetUserDataType | LoginSuccessType | SetMessageTextType | IsLoadingACType;\r\n\r\ntype SetUserDataType = ReturnType<typeof setUserData>\r\nexport const setUserData = (userData: UserDataType | null) => ({type: SET_USER_DATA, userData} as const);\r\n\r\ntype LoginSuccessType = ReturnType<typeof loginSuccess>;\r\nexport const loginSuccess = (isAuth: boolean) => ({type: LOGIN_SUCCESS, isAuth} as const);\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const login = (email: string, password: string, isRemember: boolean): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            dispatch(isLoading(true));\r\n            const data = await authAPI.login(email, password, isRemember);\r\n            setItemToLS('token', data.token);\r\n            dispatch(setUserData({...data}));\r\n            dispatch(loginSuccess(true));\r\n        } catch (err) {\r\n            dispatch(setMessageText(err.response.data.error))\r\n        } finally {\r\n            dispatch(isLoading(false));\r\n        }\r\n    };\r\n};\r\n\r\nexport const setAuthMe = (token: string) => async (dispatch: Dispatch<ActionsTypes>) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        dispatch(loginSuccess(true));\r\n        const data = await authAPI.authMe(token);\r\n        setItemToLS('token', data.token);\r\n        dispatch(setUserData({...data}));\r\n        return data\r\n    } catch (err) {\r\n        dispatch(loginSuccess(false));\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};\r\n\r\n\r\n\r\n","import React, {InputHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react';\r\nimport styles from './NewInput.module.scss';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement> & { error?: string, onChangeHandler?: (value: string) => void }\r\n\r\nexport const NewInput: React.FC<InputPropsType> = React.memo(({error, onChangeHandler, onChange,  ...props}) => {\r\n\r\n   const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n       onChangeHandler && onChangeHandler(e.currentTarget.value);\r\n       onChange && onChange(e)\r\n   };\r\n    return (\r\n        <>\r\n            <input className={styles.input} onChange={onChangeCallback} {...props}/>\r\n            {error && <span>{error}</span>}\r\n        </>\r\n    )\r\n});\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styles from './Button.module.scss';\r\n\r\nexport type ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement> & { title: string | number };\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo(({title, ...props}) => {\r\n    return (\r\n        <div>\r\n            <button className={styles.button} {...props}>{title}</button>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport styles from './Modal.module.scss';\r\n\r\ntype ModalPropsType = {\r\n    modalSize?: { width: string, height: string}\r\n    isResponseError?: boolean\r\n    children: React.ReactNode\r\n    isShow: boolean\r\n    hideModal?: () => void\r\n}\r\n\r\nexport const Modal = React.memo((props:ModalPropsType) => {\r\n    const {modalSize, isResponseError, children, isShow, hideModal} = props;\r\n    const modalClass = isResponseError ? `${styles.modal} ${styles.error} ` : styles.modal;\r\n\r\n    if (!isShow) return null;\r\n\r\n    return (\r\n        <>\r\n            <div className={styles.background} onClick={hideModal}> </div>\r\n            <div className={modalClass} style={modalSize}>\r\n                {children}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n});","import React, {useCallback} from 'react';\r\nimport {Button} from '../Button/Button';\r\nimport {useDispatch} from 'react-redux';\r\nimport {SetMessageTextType} from '../../../BLL/appReducer';\r\nimport {Modal} from '../Modal/Modal';\r\n\r\ntype MessageModalPropsType = {\r\n    messageText: string\r\n    isResponseError: boolean\r\n    actionCreator: SetMessageTextType\r\n}\r\n\r\nexport const MessageModal: React.FC<MessageModalPropsType> = React.memo((props) => {\r\n    const {messageText, isResponseError, actionCreator} = props;\r\n    const dispatch = useDispatch();\r\n\r\n    const closeMessage = useCallback(() => {\r\n        dispatch(actionCreator)\r\n    }, [dispatch, actionCreator]);\r\n\r\n    return <>\r\n        <Modal isResponseError={isResponseError} isShow={Boolean(messageText)}>\r\n            <h3>{messageText}</h3>\r\n            <Button title={'Close'} onClick={closeMessage}/>\r\n        </Modal>\r\n    </>\r\n});\r\n\r\n\r\n","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport styles from './SignIn.module.scss';\r\nimport {NewInput} from '../../../main/UI/common/NewInput/NewInput';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {FORGOT_PATH, SIGN_UP_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport {MessageModal} from '../../../main/UI/common/MessageModal/MessageModal';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\n\r\ntype SignInPropsType = {\r\n    email: string\r\n    password: string\r\n    isRemember: boolean\r\n    messageText: string\r\n    changeEmail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changePass: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changeIsRemember: (e: ChangeEvent<HTMLInputElement>) => void\r\n    sendFormData: (e: FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\nexport const SignIn: React.FC<SignInPropsType> = React.memo((props) => {\r\n    const {\r\n        email, password, isRemember, messageText, changePass,\r\n        changeEmail, changeIsRemember, sendFormData\r\n    } = props;\r\n    return (\r\n        <div>\r\n            <h1>Sign In</h1>\r\n            <form onSubmit={sendFormData} className={styles.form}>\r\n                <NewInput type={'text'} placeholder={'Enter your e-mail'}\r\n                          onChange={changeEmail} value={email}/>\r\n                <NewInput type={'password'} placeholder={'Enter your password'}\r\n                          onChange={changePass} value={password}/>\r\n                <NavLink to={FORGOT_PATH} className={styles.forgotLink}>Forgot password?</NavLink>\r\n                <label>\r\n                    <NewInput type={'checkbox'} className={styles.checkbox}\r\n                              onChange={changeIsRemember} checked={isRemember}/>Remember Me\r\n                </label>\r\n                <Button title={'Sign in'}/>\r\n                <NavLink to={SIGN_UP_PATH}>Registration</NavLink>\r\n                {\r\n                    messageText && <MessageModal messageText={messageText} isResponseError={true}\r\n                                            actionCreator={setMessageText('')}/>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n});","import React, {useEffect, useState} from 'react';\r\nimport s from './Loading.module.scss'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../BLL/store\";\r\n\r\n\r\nconst Loading = () => {\r\n    let [points, setPoints] = useState<string>('.');\r\n    let isLoading = useSelector((state: AppStateType) => state.signUp.isLoading);\r\n\r\n    useEffect(( ) => {\r\n        const id = setTimeout(() => {\r\n            points.length < 5\r\n                ? setPoints(points + '.')\r\n                : setPoints('.')\r\n        }, 1000);\r\n        return ( ) => {\r\n            clearTimeout(id)\r\n        }\r\n    }, [setPoints,  points]);\r\n\r\n    // const loadingProgress = () => {\r\n    //     setTimeout(() => {\r\n    //         points.length < 5\r\n    //             ? setPoints(points + '.')\r\n    //             : setPoints('.')\r\n    //     }, 1000);\r\n    //     return points\r\n    // };\r\n    return (\r\n        <div className={isLoading ? s.body : s.hide}>\r\n            <span className={s.loadingProgress}>\r\n                {/*{isLoading && 'Loading' + loadingProgress()}   // Здесь заменил loadingProgress() на points*/}\r\n                {isLoading && 'Loading' + points}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;\r\n","import React, {ChangeEvent, FormEvent, useCallback, useState} from 'react';\r\nimport {PROFILE_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login,} from '../BLL/signInReducer';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {SignIn} from './SignIn';\r\nimport Loading from '../../../main/UI/common/LoadingToggle/Loading';\r\n\r\nexport const SignInContainer = React.memo(() => {\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.signIn.isAuth);\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.signUp.isLoading);\r\n\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [isRemember, setIsRemember] = useState<boolean>(false);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const changePass = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }, [setPassword]);\r\n\r\n    const changeIsRemember = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setIsRemember(e.currentTarget.checked)\r\n    }, [setIsRemember]);\r\n\r\n    const sendFormData = useCallback((e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(login(email, password, isRemember));\r\n        setEmail('');\r\n        setPassword('');\r\n        setIsRemember(false);\r\n    }, [dispatch, email, password, isRemember]);\r\n\r\n    if (isAuth) return <Redirect to={PROFILE_PATH}/>;\r\n\r\n    return <>\r\n        <SignIn email={email} password={password} isRemember={isRemember}\r\n                changeEmail={changeEmail} changePass={changePass} messageText={messageText}\r\n                changeIsRemember={changeIsRemember} sendFormData={sendFormData}/>\r\n        {isLoading && <Loading/>}\r\n    </>\r\n});\r\n\r\n","import React, {InputHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement> & { error?: string, value?: string, changeInput?: (e:ChangeEvent<HTMLInputElement>) => void }\r\n\r\nexport const Input: React.FC<InputPropsType> = ({error, value, changeInput, ...props}) => {\r\n    return (\r\n        <>\r\n            <input className={styles.input} {...props} value={value} onChange={changeInput} />\r\n            {error && <span>{error}</span>}\r\n        </>\r\n    )\r\n};\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Input} from '../../../main/UI/common/Input/Input';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport s from './SignUp.module.scss';\r\nimport {AppStateType} from \"../../../main/BLL/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {isLoading, SignUpError, signUpTC} from \"../BLL/SignUpReducer\";\r\nimport Loading from \"../../../main/UI/common/LoadingToggle/Loading\";\r\nimport {SignUpPropsType} from \"../BLL/SignUpTypes\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {SIGN_IN_PATH} from \"../../../main/UI/Routes/Routes\";\r\n\r\n\r\n\r\n\r\nexport const SignUp: React.FC<SignUpPropsType> = ({login, firstPass,\r\n                                                      secondPass,\r\n                                                      setFirstPass, setLogin, setSecondPass,\r\n                                                      registerMe, similar,\r\n                                                      wrongPassword, responseMessage, isLoading}) => {\r\n    const setEmailCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLogin(e.currentTarget.value)\r\n    };\r\n    const setPassCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setFirstPass(e.currentTarget.value)\r\n    };\r\n    const setConfirmPassCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSecondPass(e.currentTarget.value)\r\n    };\r\n    return (\r\n        <div className={s.container}>\r\n            <h1>Sign Up</h1>\r\n\r\n            <div className={s.inputs}>\r\n                <Input placeholder={'Enter Your email'} changeInput={setEmailCallback}\r\n                        type='text' value={login}\r\n                />\r\n                <Input placeholder={'Enter Your Password'} changeInput={setPassCallback}\r\n                        type='password' value={firstPass}\r\n                />\r\n                <Input placeholder={'Confirm Your password'} changeInput={setConfirmPassCallback}\r\n                        type='password' value={secondPass}\r\n                /> {!similar && <span>password does not match!</span>}\r\n            </div>\r\n\r\n            <Button title={'Sign Up'} onClick={similar? registerMe : wrongPassword} />\r\n            {isLoading && <Loading/>}\r\n            {<span>{responseMessage}</span>}\r\n        </div>\r\n    )\r\n};\r\nexport const SignUpContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {signUpSuccess, message} = useSelector((state: AppStateType) => state.signUp);\r\n    const [login, setLogin] = useState('');\r\n    const [similar, setSimilar] = useState<boolean>(false);\r\n    const [firstPass, setFirstPass] = useState<string>('');\r\n    const [secondPass, setSecondPass] = useState<string>('');\r\n    useEffect(() => {\r\n        if (secondPass === firstPass && secondPass) setSimilar(true);\r\n        else setSimilar(false)\r\n    }, [secondPass, firstPass]);\r\n    const registerMe = () => {\r\n        dispatch(signUpTC(login, firstPass))\r\n    };\r\n    const wrongPassword = () => {\r\n        dispatch(SignUpError('wrong credentials'))\r\n    };\r\n\r\n    return(\r\n        <>\r\n            { !signUpSuccess ?\r\n                <SignUp login={login} setLogin={setLogin}\r\n                    firstPass={firstPass} setFirstPass={setFirstPass}\r\n                    secondPass={secondPass} setSecondPass={setSecondPass}\r\n                    similar={similar} registerMe={registerMe}\r\n                    responseMessage={message} wrongPassword={wrongPassword}\r\n                    isLoading={isLoading}\r\n            />\r\n            : <Redirect to={SIGN_IN_PATH}/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport styles from './SetNewPass.module.scss';\r\nimport {NewInput} from '../../../main/UI/common/NewInput/NewInput';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport {MessageModal} from '../../../main/UI/common/MessageModal/MessageModal';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\n\r\ntype SetNewPassPropsType = {\r\n    password: string\r\n    passwordRepeat: string\r\n    sendNewPassword: (e: FormEvent<HTMLFormElement>) => void\r\n    changePassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changePasswordRepeat: (value: string) => void\r\n    messageText: string\r\n    isResponseError: boolean\r\n}\r\n\r\nexport const SetNewPass: React.FC<SetNewPassPropsType> = React.memo( (props) => {\r\n    const {password, passwordRepeat, sendNewPassword, changePassword,\r\n        changePasswordRepeat, messageText, isResponseError} = props;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Set New Password</h1>\r\n            <form className={styles.form} onSubmit={sendNewPassword}>\r\n                <NewInput value={password} placeholder={'Enter new password'}\r\n                          onChange={changePassword} type={'password'}/>\r\n                <NewInput value={passwordRepeat} placeholder={'Repeat password'}\r\n                          onChangeHandler={changePasswordRepeat} type={'password'}/>\r\n                <NavLink to={SIGN_IN_PATH}>Sign In</NavLink>\r\n                <Button title={'Set password'}/>\r\n            </form>\r\n            {\r\n                messageText && <MessageModal messageText={messageText} isResponseError={isResponseError}\r\n                                        actionCreator={setMessageText('')} />\r\n            }\r\n        </div>\r\n    )\r\n});","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\n\r\nexport const setNewPassAPI = {\r\n    setNewPass (password: string, resetPasswordToken: string = '') {\r\n        return instance.post<{success: boolean}>('/auth/set-new-password', {password, resetPasswordToken})\r\n            .then(res => res.data)\r\n    }\r\n};","import { Dispatch } from \"redux\";\r\nimport {setNewPassAPI} from '../DAL/setNewPassAPI';\r\nimport { setMessageText } from \"../../../main/BLL/appReducer\";\r\nimport {isLoading} from '../../Sign-Up/BLL/SignUpReducer';\r\n\r\nconst SET_NEW_PASS_SUCCESS = 'cards/setNewPassReducer/setNewPassReducer';\r\n\r\nconst initialState = {\r\n    newPassSuccess: false\r\n};\r\n\r\ntype StateType = typeof initialState;\r\n\r\nexport const setNewPassReducer = (state:StateType = initialState, action: setNewPassSuccessType): StateType => {\r\n    switch (action.type) {\r\n        case SET_NEW_PASS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                newPassSuccess: action.isSuccess\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype setNewPassSuccessType = ReturnType<typeof setNewPassSuccess>;\r\nconst setNewPassSuccess = (isSuccess: boolean) => ({type: SET_NEW_PASS_SUCCESS, isSuccess} as const);\r\n\r\nexport const setNewPassword = (password: string, token: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        await setNewPassAPI.setNewPass(password, token);\r\n        dispatch(setNewPassSuccess(true));\r\n        dispatch(setMessageText('Success! Password changed'));\r\n    } catch (err) {\r\n        dispatch(setMessageText(err.response.data.error));\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};","import React, {ChangeEvent, FormEvent, useCallback, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {SetNewPass} from './SetNewPass';\r\nimport {useParams, Redirect} from 'react-router-dom';\r\nimport {setNewPassword} from '../BLL/setNewPassReducer';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\nimport Loading from '../../../main/UI/common/LoadingToggle/Loading';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\n\r\nexport const SetNewPassContainer = () => {\r\n    const [password, setPassword] = useState<string>('');\r\n    const [redirect, setRedirect] = useState<boolean>(false);\r\n    const [passwordRepeat, setPasswordRepeat] = useState<string>('');\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n    const newPassSuccess = useSelector<AppStateType, boolean>(state => state.setNewPass.newPassSuccess);\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.signUp.isLoading);\r\n    const dispatch = useDispatch();\r\n    const {resetToken} = useParams();\r\n\r\n\r\n    const changePassword = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }, [setPassword]);\r\n\r\n    const changePasswordRepeat = useCallback((value: string) => {\r\n        setPasswordRepeat(value)\r\n    }, [setPasswordRepeat]);\r\n\r\n    const sendNewPassword = useCallback((e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        if (password === passwordRepeat) {\r\n            dispatch(setNewPassword(password, resetToken))\r\n        } else {\r\n            dispatch(setMessageText('Passwords doesn\\'t match'))\r\n        }\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n    }, [dispatch, password, passwordRepeat, resetToken]);\r\n\r\n    if (newPassSuccess) setTimeout(() => {\r\n        setRedirect(true)\r\n    }, 2000);\r\n\r\n    if (redirect) return <Redirect to={SIGN_IN_PATH}/>;\r\n\r\n    return <>\r\n        <SetNewPass password={password} passwordRepeat={passwordRepeat}\r\n                    sendNewPassword={sendNewPassword} changePassword={changePassword}\r\n                    changePasswordRepeat={changePasswordRepeat} messageText={messageText}\r\n                    isResponseError={!newPassSuccess}/>\r\n        {isLoading && <Loading/>}\r\n    </>\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../main/BLL/store';\r\nimport {UserDataType} from '../Sign-In/types/ResponseSuccessTypes';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {SIGN_IN_PATH} from '../../main/UI/Routes/Routes';\r\nimport {getItemFromLS} from '../Sign-In/LS-service/localStorage';\r\nimport {setAuthMe} from '../Sign-In/BLL/signInReducer';\r\nimport Loading from '../../main/UI/common/LoadingToggle/Loading';\r\n\r\nexport const Profile = () => {\r\n    const userData = useSelector<AppStateType, UserDataType | null>(state => state.signIn.userData);\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.signIn.isAuth);\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.signUp.isLoading);\r\n\r\n    const token = getItemFromLS('token');\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (firstRendering && token && !isAuth) {\r\n            dispatch(setAuthMe(token));\r\n            setFirstRendering(false);\r\n        }\r\n    }, [dispatch, token, setFirstRendering, firstRendering, isAuth]);\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={SIGN_IN_PATH}/>;\r\n    }\r\n    if (isLoading) return <Loading/>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile </h1>\r\n            <div><b>created:</b> {userData?.created}</div>\r\n            <div><b>email:</b> {userData?.email}</div>\r\n            <div><b>isAdmin:</b> {String(userData?.isAdmin)}</div>\r\n            <div><b>name:</b> {userData?.name}</div>\r\n            <div><b>publicCardPacksCount:</b> {userData?.publicCardPacksCount}</div>\r\n            <div><b>rememberMe:</b> {String(userData?.rememberMe)}</div>\r\n            <div><b>success:</b> {String(userData?.success)}</div>\r\n            <div><b>token:</b> {userData?.token}</div>\r\n            <div><b>tokenDeathTime:</b> {userData?.tokenDeathTime}</div>\r\n            <div><b>updated:</b> {userData?.updated}</div>\r\n            <div><b>verified:</b> {String(userData?.verified)}</div>\r\n            <div><b>__v:</b> {userData?.__v}</div>\r\n            <div><b>_id:</b> {userData?._id}</div>\r\n        </div>\r\n    )\r\n};","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport styles from './Forgot.module.scss';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport {NewInput} from '../../../main/UI/common/NewInput/NewInput';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {MessageModal} from '../../../main/UI/common/MessageModal/MessageModal';\r\nimport { setMessageText } from '../../../main/BLL/appReducer';\r\n\r\ntype ForgotPropsType = {\r\n    email: string\r\n    messageText: string\r\n    isResponseError: boolean\r\n    changeEmail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    sendEmail: (e: FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\nexport const Forgot:React.FC<ForgotPropsType> = React.memo((props) => {\r\n    const {email, messageText, isResponseError, changeEmail, sendEmail} = props;\r\n    return (\r\n        <div>\r\n            <h1>Forgot</h1>\r\n            <form className={styles.form} onSubmit={sendEmail}>\r\n                <NewInput type={'text'} placeholder={'Enter your e-mail'}\r\n                          value={email} onChange={changeEmail}/>\r\n                <NavLink to={SIGN_IN_PATH}>Sign In</NavLink>\r\n                <Button title={'Send email'}/>\r\n            </form>\r\n            {\r\n                messageText && <MessageModal messageText={messageText} isResponseError={isResponseError}\r\n                                        actionCreator={setMessageText('')}/>\r\n            }\r\n        </div>\r\n    )\r\n});","import axios from 'axios';\r\nimport {ForgotSuccessType} from '../types/ResponseSuccessTypes';\r\n\r\nconst instance = axios.create({\r\n   baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\nexport const forgotAPI = {\r\n    sendEmail(email: string) {\r\n        return instance.post<ForgotSuccessType>('auth/forgot', {\r\n            email: email,\r\n            html1: \"<a href='http://localhost:3000/#/set-new-password/\",\r\n            html2: \"'>reset-password-link</a>\"\r\n        })\r\n            .then(res => res.data)\r\n    }\r\n};\r\n","import {Dispatch} from 'redux';\r\nimport {forgotAPI} from '../DAL/forgotAPI';\r\nimport {setMessageText, SetMessageTextType} from '../../../main/BLL/appReducer';\r\nimport {isLoading} from '../../Sign-Up/BLL/SignUpReducer';\r\nimport {IsLoadingACType} from '../../Sign-Up/BLL/SignUpTypes';\r\n\r\nconst SET_FORGOT_SUCCESS = 'cards/forgotReducer/SET_FORGOT_SUCCESS';\r\n\r\nconst initialState = {\r\n    forgotSuccess: false\r\n};\r\n\r\ntype StateType = typeof initialState;\r\n\r\nexport const forgotReducer = (state: StateType = initialState, action: SetForgotSuccessType): StateType => {\r\n    switch (action.type) {\r\n        case SET_FORGOT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                forgotSuccess: action.success\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = SetForgotSuccessType | SetMessageTextType | IsLoadingACType;\r\n\r\ntype SetForgotSuccessType = ReturnType<typeof setForgotSuccess>\r\nexport const setForgotSuccess = (success: boolean) => ({type: SET_FORGOT_SUCCESS, success} as const);\r\n\r\nexport const sendEmail = (email: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        await forgotAPI.sendEmail(email);\r\n        dispatch(setForgotSuccess(true));\r\n        dispatch(setMessageText('Success! Check your email'))\r\n    } catch (err) {\r\n        dispatch(setMessageText(err.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};","import React, {ChangeEvent, FormEvent, useCallback, useState} from 'react';\r\nimport {Forgot} from './Forgot';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {sendEmail} from '../BLL/forgotReducer';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport Loading from '../../../main/UI/common/LoadingToggle/Loading';\r\n\r\nexport const ForgotContainer = () => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n    const forgotSuccess = useSelector<AppStateType, boolean>(state => state.forgot.forgotSuccess);\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.signUp.isLoading);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const onSendEmail = useCallback((e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(sendEmail(email));\r\n        setEmail('');\r\n    }, [dispatch, email]);\r\n\r\n    return <>\r\n        <Forgot email={email} changeEmail={changeEmail} isResponseError={!forgotSuccess}\r\n                messageText={messageText} sendEmail={onSendEmail}/>\r\n        {isLoading && <Loading/>}\r\n    </>\r\n};","import React, {useState} from 'react';\r\nimport styles from './ColumnsHeaders.module.scss';\r\nimport {Button} from '../../Button/Button';\r\n\r\ntype HeadersPropsType = {\r\n    columnsHeaders: Array<string>\r\n    getItems: (sortParams: string) => void\r\n    showModal: (modalType: string) => void\r\n};\r\n\r\n\r\nexport const ColumnsHeaders: React.FC<HeadersPropsType> = React.memo((props) => {\r\n    const [sortInc, setSort] = useState<boolean>(false);\r\n    let sortDirection = '';\r\n\r\n    const {columnsHeaders, getItems, showModal} = props;\r\n\r\n    const onSetSort = (e: React.MouseEvent) => {\r\n        let property = e.currentTarget.textContent;\r\n        sortDirection = sortInc ? '&uarr;' : ' &darr;';\r\n        if (property) {\r\n            property = property.replace(/[^\\w]/g, '');\r\n            const typeSort = +sortInc + property.toLowerCase();\r\n            getItems(typeSort);\r\n        }\r\n        setSort(!sortInc);\r\n        e.currentTarget.innerHTML = `${property}  ${sortDirection}`\r\n    };\r\n\r\n    return (\r\n        <div className={styles.headers}>\r\n            {columnsHeaders.map((header, i) => {\r\n                    return i === columnsHeaders.length - 1\r\n                        ? <Button key={header} title={header} name={'add'} onClick={(e) => showModal(e.currentTarget.name)}/>\r\n                        : <span key={header}>\r\n                            <b onClick={onSetSort}>{header}</b>\r\n                    </span>\r\n                }\r\n            )}\r\n        </div>\r\n    )\r\n});","import React from 'react';\r\nimport styles from './Table.module.scss';\r\nimport {Button} from '../Button/Button';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {CARDS_PATH} from '../../Routes/Routes';\r\nimport {ColumnsHeaders} from './ColumnsHeaders/ColumnsHeaders';\r\nimport {CardItemType} from '../../../../features/Cards/types';\r\nimport {PackItemType} from '../../../../features/Packs/types';\r\n\r\ntype TablePropsType = {\r\n    columnsHeaders: Array<string>\r\n    rows: any\r\n    getItems: (sortParams: string) => void\r\n    tableModel: string\r\n    showModal: (modalType: string, id?: string, name?: string, question?: string, answer?: string) => void\r\n}\r\n\r\nexport const Table = React.memo(function (props: TablePropsType) {\r\n    const {columnsHeaders, rows, tableModel, getItems, showModal} = props;\r\n\r\n    return (\r\n        <div className={styles.table}>\r\n            <ColumnsHeaders columnsHeaders={columnsHeaders} getItems={getItems} showModal={showModal}/>\r\n            {\r\n                tableModel === 'packs'\r\n                    ? <div className={styles.rows}>\r\n                        {!rows.length && <span>Packs didn't create, yet</span>}\r\n                        {\r\n                            rows.map((row: PackItemType) => {\r\n                                return <div key={row._id} className={styles.row}>\r\n                                        <span>\r\n                                            <NavLink to={`${CARDS_PATH}/${row._id}`}>{row.name}</NavLink>\r\n                                        </span>\r\n                                    <span>{row.grade}</span>\r\n                                    <span className={styles.buttonColumn}>\r\n                                           <Button title={'Change'} name={'change'} onClick={(e) => showModal(e.currentTarget.name, row._id, row.name)}/>\r\n                                           <Button title={'Delete'} name={'delete'} onClick={(e) => showModal(e.currentTarget.name, row._id)}/>\r\n                                       </span>\r\n                                </div>\r\n                            })\r\n                        }\r\n                    </div>\r\n                    : <div className={styles.rows}>\r\n                        {!rows.length && <span>Cards didn't create, yet</span>}\r\n                        {\r\n                            rows\r\n                                .map((row: CardItemType) => {\r\n                                    return <div key={row._id} className={styles.row}>\r\n                                        <span>{row.question}</span>\r\n                                        <span>{row.answer}</span>\r\n                                        <span>{row.grade}</span>\r\n                                        <span className={styles.buttonColumn}>\r\n                                           <Button title={'Change'} name={'change'}\r\n                                                   onClick={(e) => showModal(e.currentTarget.name, row._id, row.question, row.answer)}/>\r\n                                           <Button title={'Delete'} name={'delete'}\r\n                                                   onClick={(e) => showModal(e.currentTarget.name, row._id)}/>\r\n                                       </span>\r\n                                    </div>\r\n                                })\r\n                        }\r\n                    </div>\r\n            }\r\n        </div>\r\n    )\r\n});\r\n","import axios from 'axios';\r\nimport {PacksType} from '../types';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\nexport const packsAPI = {\r\n    getPacks (token: string, sortParams: string = '', pageCount: number = 4, page: number = 1 ) {\r\n        return instance.get<PacksType>(`/cards/pack?token=${token}&pageCount=${pageCount}&page=${page}&${sortParams}`)\r\n            .then(res => res.data)\r\n    },\r\n\r\n    addPack (token: string, packName: string) {\r\n        return instance.post('/cards/pack', {\r\n            cardsPack: {\r\n                name: packName,\r\n                grade: 0\r\n            },\r\n            token\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n\r\n    updatePack (packId: string, token: string, newName: string) {\r\n        return instance.put('/cards/pack', {\r\n            cardsPack: {\r\n                _id: packId,\r\n                name: newName\r\n            },\r\n            token\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n\r\n    deletePack (idPack: string, token: string | undefined) {\r\n        return instance.delete(`/cards/pack?token=${token}&id=${idPack}`)\r\n            .then(res => res.data)\r\n    }\r\n};","import {Dispatch} from 'redux';\r\nimport {packsAPI} from '../DAL/packsAPI';\r\nimport {PackItemType} from '../types';\r\nimport {setItemToLS} from '../../Sign-In/LS-service/localStorage';\r\nimport {setMessageText, SetMessageTextType} from '../../../main/BLL/appReducer';\r\nimport {isLoading} from '../../Sign-Up/BLL/SignUpReducer';\r\nimport {IsLoadingACType} from '../../Sign-Up/BLL/SignUpTypes';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\n\r\nconst SET_PACKS = 'cards/packsReducer/SET_PACKS';\r\nconst UPDATE_PACK = 'cards/packsReducer/UPDATE_PACK';\r\nconst SET_NEW_PAGE = 'cards/packsReducer/SET_NEW_PAGE';\r\n\r\nconst initialState = {\r\n    packs: [] as Array<PackItemType>,\r\n    pageCount: 4 as number,\r\n    page: 1 as number\r\n};\r\n\r\ntype StateType = typeof initialState;\r\ntype ActionsType = SetPacksType | UpdatePackType | SetMessageTextType | IsLoadingACType | SetNewPageType;\r\n\r\nexport const packsReducer = (state: StateType = initialState, action: ActionsType): StateType => {\r\n    switch (action.type) {\r\n        case SET_PACKS:\r\n            return {\r\n                ...state,\r\n                packs: action.packs\r\n            };\r\n        case UPDATE_PACK:\r\n            return {\r\n                ...state,\r\n              packs: state.packs.map( p => p._id === action.idPack ? {...p, ...action.newPack } : p)\r\n            };\r\n        case SET_NEW_PAGE:\r\n            return {\r\n                ...state,\r\n                page: action.newPage\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype SetPacksType = ReturnType<typeof setPacks>\r\nexport const setPacks = (packs: Array<PackItemType>) => ({type:SET_PACKS, packs} as const);\r\n\r\ntype UpdatePackType = ReturnType<typeof updatePackAC>;\r\nconst updatePackAC = (idPack: string, newPack: PackItemType) => ({type: UPDATE_PACK, idPack, newPack} as const);\r\n\r\ntype SetNewPageType = ReturnType<typeof SetNewPageAC>;\r\nexport const SetNewPageAC = (newPage: number) => ({type: SET_NEW_PAGE, newPage} as const);\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>;\r\n\r\nexport const getPacks = (token: string, sortParams?: string) =>  async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await packsAPI.getPacks(token, sortParams);\r\n        setItemToLS('token', data.token);\r\n        dispatch(setPacks(data.cardPacks));\r\n    } catch (e) {\r\n        dispatch(setMessageText(e.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};\r\n\r\n\r\nexport const getPacksNew = (token: string, page: number) =>  async (dispatch: Dispatch<ActionsType>) => {\r\n\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await packsAPI.getPacks(token, '', 4, page);\r\n        setItemToLS('token', data.token);\r\n        dispatch(setPacks(data.cardPacks));\r\n    } catch (e) {\r\n        dispatch(setMessageText(e.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};\r\n\r\nexport const addPack = (token: string, packName: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await packsAPI.addPack(token, packName);\r\n        await dispatch(getPacks(data.token));\r\n    } catch (e) {\r\n\r\n        dispatch(setMessageText(e.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport const changePack = (packId: string, token: string, newName: string ) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await packsAPI.updatePack(packId, token, newName);\r\n        setItemToLS('token', data.token);\r\n        dispatch(updatePackAC(packId, data.updatedCardsPack));\r\n    } catch(e){\r\n        setItemToLS('token', e.response.data.token);\r\n        dispatch(setMessageText(e.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};\r\n\r\nexport const deletePack = (packId: string, token: string ): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await packsAPI.deletePack(packId, token);\r\n        setItemToLS('token', data.token);\r\n        await dispatch(getPacks(data.token))\r\n    } catch (e) {\r\n        setItemToLS('token', e.response.data.token);\r\n        dispatch(setMessageText(e.response.data.error));\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};","import React, {InputHTMLAttributes, DetailedHTMLProps, ChangeEvent, useState} from 'react';\r\nimport {Button} from \"../Button/Button\";\r\nimport s from './Search.module.scss'\r\nimport {Input} from \"../Input/Input\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../BLL/store\";\r\nimport {PackItemType} from \"../../../../features/Packs/types\";\r\nimport {getPacks, setPacks} from \"../../../../features/Packs/BLL/packsReducer\";\r\nimport {getItemFromLS} from \"../../../../features/Sign-In/LS-service/localStorage\";\r\n\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement> &\r\n    { searchQuery?: string, setQuery?: (e: React.ChangeEvent<HTMLInputElement>) => void,\r\n        toSearch?: () => void, toReset?: () => void}\r\n\r\nexport const Search: React.FC<InputPropsType> =\r\n    React.memo(({ onChange, setQuery, searchQuery, toSearch, toReset, ...props}) => {\r\n\r\n\r\n    return <div className={s.container}>\r\n        <div className={s.searchArea}>\r\n            <Input changeInput={setQuery} {...props} type='text'\r\n                   placeholder='Card name' value={searchQuery}\r\n\r\n            />\r\n        </div>\r\n        <Button title='Search' onClick={toSearch} style={{marginRight: '20px'}}/>\r\n        <Button title='Reset' onClick={toReset}/>\r\n    </div>\r\n});\r\n\r\nexport const SearchContainer = () => {\r\n\r\n    // Достаём массив колод из state\r\n    const dispatch = useDispatch();\r\n    const cardsPack = useSelector<AppStateType, Array<PackItemType>>(state => state.packs.packs);\r\n\r\n    // Сброс результатов поиска\r\n    const toReset = () => {\r\n        const token = getItemFromLS('token') as string; // Достаём токен, т.к. его надо передать в getPacks\r\n        dispatch(getPacks(token))\r\n    };\r\n\r\n    const toSearch = () => {\r\n        let result = cardsPack.filter((i: PackItemType) => {\r\n            return i.name.match(new RegExp(searchQuery, 'g'));\r\n        });  // Поиск совпадений запроса в массиве колод\r\n        dispatch(setPacks(result)); // Сетаем новый массив\r\n    };\r\n\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const setQuery = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchQuery(e.currentTarget.value)\r\n    };\r\n\r\n    return <Search setQuery={setQuery} searchQuery={searchQuery} toSearch={toSearch} toReset={toReset}/>\r\n};\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps, useEffect, useState} from 'react';\r\nimport s from './Paginator.module.scss';\r\nimport {Button} from \"../Button/Button\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../BLL/store\";\r\nimport {getPacksNew, SetNewPageAC} from \"../../../../features/Packs/BLL/packsReducer\";\r\nimport {getItemFromLS} from \"../../../../features/Sign-In/LS-service/localStorage\";\r\n\r\nexport type ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement> &\r\n    {\r\n        title: string, currentPage: number, setPage: any,\r\n        disableLeftBtn: boolean, disableRightBtn: boolean, lastPage: any,\r\n        b4Call: () => void, b1Call: () => void, b1: string | number, b2: string | number,\r\n        b3: string | number, b4: string | number, showSpan: boolean, arrowsCall: any\r\n    };\r\n\r\nconst Paginator: React.FC<ButtonPropsType> =\r\n    React.memo(({ title, currentPage, setPage, disableLeftBtn, disableRightBtn, lastPage,\r\n                    b4Call, b1Call, b1, b2, b3, b4, showSpan, arrowsCall,\r\n                                                             ...props\r\n                                                         }) => {\r\n    return (\r\n        <div className={s.container}>\r\n            <h3>Pages</h3>\r\n            <Button title={'<'} className={s.arrow} disabled={disableLeftBtn} onClick={() => {arrowsCall('left')}} />\r\n            <Button title={b1.toString()} className={s.button} onClick={b1Call} />\r\n            <Button title={b2.toString()} className={s.button} onClick={() => {\r\n                setPage(0)\r\n            }}/>\r\n            <Button title={b3.toString()} className={s.button} onClick={() => {\r\n                setPage(1)\r\n            }}/>\r\n            <Button title={b4.toString()} className={s.button} onClick={b4Call}/>\r\n            {showSpan &&  <span>...</span>}\r\n            <Button title={lastPage || '...'} className={s.button} onClick={() => {setPage(lastPage)}}/>\r\n            <Button title={'>'} className={s.arrow} disabled={disableRightBtn} onClick={() => {arrowsCall('right')}}/>\r\n        </div>\r\n    )\r\n});\r\nexport const PaginatorContainer = () => {\r\n\r\n    // Нужно починить:\r\n    // 1. Дизейблы.\r\n    // 2. Переключение страниц стрелками\r\n\r\n    // Значения кнопок\r\n    const [btns, setBtns] = useState([1, 4]);\r\n    const [btns2, setBtns2] = useState([btns[0] + 1, btns[0] + 2]);\r\n\r\n    // Данные\r\n    // const itemsCount = useSelector<any, number>(s => s.packs.packs.length);  //Кол-во колод\r\n    // const pagesCount = Math.ceil(itemsCount / pageSize); // Кол-во страниц\r\n    // let lastPage = currentPage * pageSize;\r\n    // const pageSize = useSelector<AppStateType, number>(s => s.packs.pageCount); // Кол-во элементов на странице(РАЗМЕР)\r\n\r\n    let currentPage = useSelector<AppStateType, number>(s => s.packs.page); // Текущая страница\r\n    let lastPage = 25;\r\n\r\n    // span show\r\n    const [showSpan, setShowSpan] = useState<boolean>(true);\r\n\r\n    // Проверки на кнопку 1,4\r\n    const [isB4, setIsB4] = useState<boolean>(false);\r\n    const [isB1, setIsB1] = useState<boolean>(true);\r\n\r\n    // Блокировка кнопок <>\r\n    const [disableLeftBtn, setDisableLeftBtn] = useState<boolean>(false);\r\n    const [disableRightBtn, setDisableRightBtn] = useState<boolean>(true);\r\n\r\n    useEffect(() => {\r\n        if (currentPage === 1) {\r\n            setDisableLeftBtn(true);\r\n        } else if (lastPage === currentPage) {\r\n            setDisableRightBtn(true);\r\n            setShowSpan(false);\r\n            setDisableLeftBtn(false);\r\n        } else if (currentPage < lastPage - 4 ) {\r\n            setShowSpan(true);\r\n        }\r\n        else {\r\n            setDisableRightBtn(false);\r\n            setDisableLeftBtn(false);\r\n        }\r\n    }, [currentPage]);\r\n    useEffect(() => {btns[0] < 1 && setBtns([1, 4])});\r\n\r\n    // Callbacks\r\n    const dispatch = useDispatch();\r\n\r\n    // переключение страниц <>\r\n    const arrowsCall = (dir: string) => {\r\n       if (dir === 'left' && currentPage > 1) {\r\n           currentPage -= 1\r\n       } else {\r\n           currentPage += 1\r\n       }\r\n        setPage(null);\r\n    };\r\n    //Кнопка 4\r\n    const b4Call = () => {\r\n        if(btns[1] === lastPage - 1) {\r\n            currentPage = btns[1];\r\n        } else {\r\n            currentPage = btns[1];\r\n            setBtns([currentPage, currentPage + 3]);\r\n        }\r\n        setIsB4(true);\r\n        setIsB1(false);\r\n        setPage(null);\r\n    };\r\n    //Кнопка 1\r\n    const b1Call = () => {\r\n        setIsB1(true);\r\n        if (btns[0] > 1) {\r\n            currentPage = btns[0];\r\n            setBtns([currentPage - 3, currentPage]);\r\n            setIsB4(false)\r\n        }\r\n        setPage(null);\r\n    };\r\n    // Изменение состояния кнопок 2, 3\r\n    useEffect(() => {\r\n        btns2[0] !== btns[0] + 1 && setBtns2([btns[0] + 1, btns[0] + 2]);\r\n    }, [btns2]);\r\n\r\n    // Вызов санки, экшена\r\n    const setPage = (btn: number | null) => {\r\n        if (btn === 0) {\r\n            currentPage = btns2[0];\r\n        } else if (btn === 1) {\r\n            currentPage = btns2[1];\r\n        } else if (btn === lastPage) {\r\n            currentPage = lastPage;\r\n            setBtns([lastPage - 4, lastPage - 1]);\r\n        }\r\n        setBtns2([btns[0] + 1, btns[0] + 2]);\r\n        dispatch(SetNewPageAC(currentPage));\r\n        const token = getItemFromLS('token') as string;\r\n        dispatch(getPacksNew(token, currentPage))\r\n    };\r\n\r\n    return <Paginator title={''}\r\n                      currentPage={currentPage}\r\n                      setPage={setPage}\r\n                      disableLeftBtn={disableLeftBtn}\r\n                      disableRightBtn={disableRightBtn}\r\n                      lastPage={lastPage}\r\n                      b4Call={b4Call}\r\n                      b1Call={b1Call}\r\n                      b1={btns[0]} b2={btns2[0]} b3={btns2[1]} b4={btns[1]}\r\n                      showSpan={showSpan}\r\n                      arrowsCall={arrowsCall}\r\n    />\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState, ChangeEvent} from 'react';\r\nimport {Modal} from '../../../../main/UI/common/Modal/Modal';\r\nimport {Button} from '../../../../main/UI/common/Button/Button';\r\nimport {NewInput} from '../../../../main/UI/common/NewInput/NewInput';\r\n\r\ntype AddPackModalPropsType = {\r\n    modalType: string\r\n    hideModal: () => void\r\n    addPack: (value: string) => void\r\n}\r\n\r\nexport const AddPackModal = React.memo((props: AddPackModalPropsType) => {\r\n    const {modalType, hideModal, addPack} = props;\r\n    const [name, setName] = useState<string>('');\r\n\r\n    const changeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    };\r\n\r\n    const onAddPack = () => {\r\n        addPack(name);\r\n        hideModal();\r\n    };\r\n\r\n    return (\r\n        <Modal isShow={modalType === 'add'} hideModal={hideModal}>\r\n            New pack name:\r\n            <NewInput placeholder={'Enter name'} value={name}\r\n                      onChange={changeInput} autoFocus={true}/>\r\n            <Button title={'Create pack'} onClick={onAddPack}/>\r\n        </Modal>\r\n    )\r\n});\r\n","import React, {useState, ChangeEvent, useEffect} from 'react';\r\nimport {Modal} from '../../../../main/UI/common/Modal/Modal';\r\nimport {Button} from '../../../../main/UI/common/Button/Button';\r\nimport {NewInput} from '../../../../main/UI/common/NewInput/NewInput';\r\n\r\ntype AddPackModalPropsType = {\r\n    modalType: string\r\n    hideModal: () => void\r\n    onChangePack: (value: string) => void\r\n    currentPackName: string\r\n}\r\n\r\nexport const ChangePackModal = React.memo((props: AddPackModalPropsType) => {\r\n    const {modalType, hideModal, onChangePack, currentPackName} = props;\r\n    const [name, setName] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setName(currentPackName)\r\n    }, [currentPackName, setName]);\r\n\r\n    const changeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setName(e.currentTarget.value)\r\n    };\r\n\r\n    const changePack = () => {\r\n        onChangePack(name);\r\n        hideModal();\r\n    };\r\n\r\n    return (\r\n        <Modal isShow={modalType === 'change'} hideModal={hideModal}>\r\n            Change name:\r\n            <NewInput placeholder={'Enter new name'} value={name}\r\n                      onChange={changeInput} autoFocus={true}/>\r\n            <Button title={'Save changing'} onClick={changePack}/>\r\n        </Modal>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport styles from './DeletePackModal.module.scss';\r\nimport {Modal} from '../../../../main/UI/common/Modal/Modal';\r\nimport {Button} from '../../../../main/UI/common/Button/Button';\r\n\r\ntype DeletePackModalPropsType = {\r\n    modalType: string\r\n    deletePack: () => void\r\n    hideModal: () => void\r\n}\r\n\r\nexport const DeletePackModal = React.memo((props: DeletePackModalPropsType) => {\r\n    const {modalType, deletePack, hideModal} = props;\r\n\r\n    const onDeletePack = () => {\r\n        deletePack();\r\n        hideModal()\r\n    };\r\n\r\n    return (\r\n        <Modal isShow={modalType === 'delete'}>\r\n            <p>Do you really to want delete this Pack?</p>\r\n            <div className={styles.buttonsBlock}>\r\n                <Button title={'Yes'} onClick={onDeletePack}/>\r\n                <Button title={'No'} onClick={hideModal}/>\r\n            </div>\r\n        </Modal>\r\n    )\r\n});\r\n","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {Table} from '../../../main/UI/common/Table/Table';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {getItemFromLS} from '../../Sign-In/LS-service/localStorage';\r\nimport {addPack, changePack, deletePack, getPacks} from '../BLL/packsReducer';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PackItemType} from '../types';\r\nimport {SearchContainer} from \"../../../main/UI/common/Search/Search\";\r\nimport {MessageModal} from '../../../main/UI/common/MessageModal/MessageModal';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\nimport Loading from '../../../main/UI/common/LoadingToggle/Loading';\r\nimport {PaginatorContainer} from \"../../../main/UI/common/Paginator/Paginator\";\r\nimport {AddPackModal} from './AddPackModal/AddPackModal';\r\nimport {ChangePackModal} from './ChangePackModal/ChangePackModal';\r\nimport {DeletePackModal} from './DeletePackModal/DeletePackModal';\r\n\r\nexport const Packs = function () {\r\n    const headers = ['Name', 'Grade', 'Add Pack'];\r\n\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true);\r\n    const [currentPackId, setCurrentPackId] = useState<string>('');\r\n    const [currentPackName, setCurrentPackName] = useState<string>('');\r\n    const [modalType, setModalType] = useState<string>('');\r\n    const token = getItemFromLS('token');\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.signIn.isAuth);\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.signUp.isLoading);\r\n    const packs = useSelector<AppStateType, Array<PackItemType>>(state => state.packs.packs);\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (firstRendering && token) {\r\n            dispatch(getPacks(token));\r\n            setFirstRendering(false);\r\n        }\r\n        // if (firstRendering && token && isAuth) {\r\n        //     debugger\r\n        //     dispatch(getPacks(token));\r\n        //     setFirstRendering(false);\r\n        // } else if (token && !isAuth){\r\n        //     debugger\r\n        //     dispatch(setAuthMe(token));\r\n        // }\r\n    }, [dispatch, token, setFirstRendering, firstRendering]);\r\n\r\n    const showModal = useCallback((modalType: string, packId?: string, packName?: string) => {\r\n        packId && setCurrentPackId(packId);\r\n        packName && setCurrentPackName(packName);\r\n        setModalType(modalType);\r\n    }, [setCurrentPackId, setCurrentPackName, setModalType]);\r\n\r\n    const hideModal = useCallback(() => {\r\n        setModalType('');\r\n    }, [setModalType]);\r\n\r\n    const onGetPacks = useCallback((sortParams: string) => {\r\n        token && dispatch(getPacks(token, `sortPacks=${sortParams}`));\r\n    }, [dispatch, token]);\r\n\r\n    const onChangePack = useCallback((newName: string) => {\r\n        token && dispatch(changePack(currentPackId, token, newName));\r\n    }, [dispatch, token, currentPackId]);\r\n\r\n    const onAddPack = useCallback((title: string) => {\r\n        token && dispatch(addPack(token, title));\r\n    }, [dispatch, token]);\r\n\r\n    const onDeletePack = useCallback(() => {\r\n        token && dispatch(deletePack(currentPackId, token));\r\n    }, [dispatch, token, currentPackId]);\r\n\r\n\r\n    if (!isAuth && !firstRendering) return <Redirect to={SIGN_IN_PATH}/>;\r\n    // if (isLoading) return <Loading/>;\r\n\r\n    return (\r\n        <div style={{display: 'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n            <SearchContainer/>\r\n            <Table columnsHeaders={headers} rows={packs} getItems={onGetPacks}\r\n                   tableModel={'packs'} showModal={showModal}/>\r\n            <PaginatorContainer/>\r\n            <MessageModal messageText={messageText} isResponseError={true}\r\n                          actionCreator={setMessageText('')}/>\r\n            <AddPackModal modalType={modalType} addPack={onAddPack}\r\n                          hideModal={hideModal}/>\r\n            <ChangePackModal modalType={modalType} onChangePack={onChangePack}\r\n                             hideModal={hideModal} currentPackName={currentPackName}/>\r\n            <DeletePackModal modalType={modalType} deletePack={onDeletePack} hideModal={hideModal}/>\r\n            {isLoading && <Loading/>}\r\n        </div>\r\n    )\r\n};","import axios from 'axios';\r\nimport {CardsType, DeletedCardType, NewCardType, UpdatedCardType} from '../types';\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\nexport const cardsAPI = {\r\n    getCards(token: string, packId: string, sortParams: string = '') {\r\n        return instance.get<CardsType>(`/cards/card?token=${token}&cardsPack_id=${packId}&${sortParams}`)\r\n            .then(res => res.data)\r\n    },\r\n\r\n    addCard(token: string, packId: string, question: string, answer: string) {\r\n        return instance.post<NewCardType>('/cards/card', {\r\n            card: {cardsPack_id: packId, question, answer, grade: 0},\r\n            token\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n\r\n    updateCard(cardId: string, token: string, question: string, answer: string) {\r\n        return instance.put<UpdatedCardType>('/cards/card', {\r\n            card: {_id: cardId, question, answer, grade: 0},\r\n            token\r\n        })\r\n            .then(res => res.data)\r\n    },\r\n\r\n    deleteCard(cardId: string, token: string) {\r\n        return instance.delete<DeletedCardType>(`/cards/card?token=${token}&id=${cardId}`)\r\n            .then(res => res.data)\r\n    }\r\n};","import {AppStateType} from '../../../main/BLL/store';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport {Dispatch} from 'redux';\r\nimport { isLoading } from '../../Sign-Up/BLL/SignUpReducer';\r\nimport { setItemToLS } from '../../Sign-In/LS-service/localStorage';\r\nimport {setMessageText, SetMessageTextType} from '../../../main/BLL/appReducer';\r\nimport {IsLoadingACType} from '../../Sign-Up/BLL/SignUpTypes';\r\nimport {cardsAPI} from '../DAL/cardsAPI';\r\nimport { CardItemType } from '../types';\r\n\r\nconst SET_CARDS = 'cards/packsReducer/SET_CARDS';\r\nconst UPDATE_CARD = 'cards/packsReducer/UPDATE_CARD';\r\n\r\nconst initialState = {\r\n    cards: [] as Array<CardItemType>\r\n};\r\n\r\ntype StateType = typeof initialState;\r\ntype ActionsType = SetPacksType | UpdateCardType | SetMessageTextType | IsLoadingACType;\r\n\r\nexport const cardsReducer = (state: StateType = initialState, action: ActionsType): StateType => {\r\n    switch (action.type) {\r\n        case SET_CARDS:\r\n            return {\r\n                ...state,\r\n                cards: action.cards\r\n            };\r\n        case UPDATE_CARD:\r\n            return {\r\n              ...state,\r\n              cards: state.cards.map( c => c._id === action.cardId ? {...c, ...action.newCard} : c )\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype SetPacksType = ReturnType<typeof setCards>\r\nconst setCards = (cards: Array<CardItemType>) => ({type:SET_CARDS, cards} as const);\r\n\r\ntype UpdateCardType = ReturnType<typeof updateCardAC>;\r\nconst updateCardAC = (cardId: string, newCard: CardItemType) => ({type: UPDATE_CARD, cardId, newCard} as const);\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>;\r\n\r\nexport const getCards = (token: string, packId: string, sortParams?: string) =>  async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await cardsAPI.getCards(token, packId, sortParams);\r\n        setItemToLS('token', data.token);\r\n        dispatch(setCards(data.cards));\r\n    } catch (e) {\r\n        dispatch(setMessageText(e.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};\r\n\r\nexport const addCard  = (token: string, packId: string, question: string, answer: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await cardsAPI.addCard(token, packId, question, answer);\r\n        await dispatch(getCards(data.token, data.newCard.cardsPack_id));\r\n    } catch (e) {\r\n        setItemToLS('token', e.response.data.token);\r\n        dispatch(setMessageText(e.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n\r\n};\r\n\r\nexport const changeCard = (cardId: string, token: string, question: string, answer: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await cardsAPI.updateCard(cardId, token, question, answer);\r\n        setItemToLS('token', data.token);\r\n        dispatch(updateCardAC(data.updatedCard._id, data.updatedCard));\r\n    } catch(e){\r\n        dispatch(setMessageText(e.response.data.error))\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};\r\n\r\nexport const deleteCard = (cardId: string, token: string): ThunkType => async (dispatch) => {\r\n    try {\r\n        dispatch(isLoading(true));\r\n        const data = await cardsAPI.deleteCard(cardId, token);\r\n        setItemToLS('token', data.token);\r\n        await dispatch(getCards(data.token, data.deletedCard.cardsPack_id))\r\n    } catch (e) {\r\n        dispatch(setMessageText(e.response.data.error));\r\n    } finally {\r\n        dispatch(isLoading(false));\r\n    }\r\n};","import React, {ChangeEvent, useState} from 'react';\r\nimport {Modal} from '../../../../main/UI/common/Modal/Modal';\r\nimport {NewInput} from '../../../../main/UI/common/NewInput/NewInput';\r\nimport {Button} from '../../../../main/UI/common/Button/Button';\r\n\r\ntype AddCardModalPropsType = {\r\n    modalType: string\r\n    hideModal: () => void\r\n    addCard: (question: string, answer: string) => void\r\n}\r\n\r\nexport const AddCardModal = React.memo((props: AddCardModalPropsType) => {\r\n    const {modalType, addCard, hideModal} = props;\r\n    const [question, setQuestion] = useState<string>('');\r\n    const [answer, setAnswer] = useState<string>('');\r\n\r\n    const changeQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    };\r\n\r\n    const changeAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    };\r\n\r\n    const onAddCard = () => {\r\n        addCard(question, answer);\r\n        hideModal();\r\n    };\r\n\r\n    return (\r\n        <Modal isShow={modalType === 'add'} hideModal={hideModal}\r\n               modalSize={{width: '400px', height: '300px'}}>\r\n            New card question:\r\n            <NewInput placeholder={'Enter question'} value={question} onChange={changeQuestion}\r\n                      autoFocus={true} style={{marginBottom: '10px'}}/>\r\n            New card answer:\r\n            <NewInput placeholder={'Enter answer'} value={answer}\r\n                      onChange={changeAnswer} autoFocus={true}/>\r\n            <Button title={'Create card'} onClick={onAddCard}/>\r\n        </Modal>\r\n    )\r\n});","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Modal} from '../../../../main/UI/common/Modal/Modal';\r\nimport {NewInput} from '../../../../main/UI/common/NewInput/NewInput';\r\nimport {Button} from '../../../../main/UI/common/Button/Button';\r\n\r\ntype ChangeCardModalPropsType = {\r\n    modalType: string\r\n    hideModal: () => void\r\n    changeCard: (question: string, answer: string) => void\r\n    currentQuestion: string\r\n    currentAnswer: string\r\n}\r\n\r\nexport const ChangeCardModal = React.memo((props: ChangeCardModalPropsType) => {\r\n    const {modalType, changeCard, hideModal, currentQuestion, currentAnswer} = props;\r\n    const [question, setQuestion] = useState<string>('');\r\n    const [answer, setAnswer] = useState<string>('');\r\n\r\n    useEffect(() => {\r\n        setQuestion(currentQuestion);\r\n        setAnswer(currentAnswer)\r\n    }, [currentQuestion, currentAnswer, setQuestion, setAnswer]);\r\n\r\n    const changeQuestion = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setQuestion(e.currentTarget.value)\r\n    };\r\n\r\n    const changeAnswer = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setAnswer(e.currentTarget.value)\r\n    };\r\n\r\n    const onChangeCard = () => {\r\n        changeCard(question, answer);\r\n        hideModal();\r\n    };\r\n\r\n    return (\r\n        <Modal isShow={modalType === 'change'} hideModal={hideModal}\r\n               modalSize={{width: '400px', height: '300px'}}>\r\n            Change question:\r\n            <NewInput placeholder={'Enter question'} value={question} onChange={changeQuestion}\r\n                      autoFocus={true} style={{marginBottom: '10px'}}/>\r\n            Change answer:\r\n            <NewInput placeholder={'Enter answer'} value={answer}\r\n                      onChange={changeAnswer} autoFocus={true}/>\r\n            <Button title={'Save changing'} onClick={onChangeCard}/>\r\n        </Modal>\r\n    )\r\n});","import React, {useCallback, useEffect, useState} from 'react';\r\nimport {Table} from '../../../main/UI/common/Table/Table';\r\nimport Loading from '../../../main/UI/common/LoadingToggle/Loading';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {getItemFromLS} from '../../Sign-In/LS-service/localStorage';\r\nimport {MessageModal} from '../../../main/UI/common/MessageModal/MessageModal';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {addCard, getCards, changeCard, deleteCard} from '../BLL/cardsReducer';\r\nimport {CardItemType} from '../types';\r\nimport { AddCardModal } from './AddCardModal/AddCardModal';\r\nimport {ChangeCardModal} from './ChangeCardModal/ChangeCardModal';\r\n\r\nexport const Cards = function () {\r\n    const headers = ['Question', 'Answer', 'Grade', 'Add Pack'];\r\n    const [firstRendering, setFirstRendering] = useState<boolean>(true);\r\n    const [modalType, setModalType] = useState<string>('');\r\n    const [currentCardId, setCurrentCardId] = useState<string>('');\r\n    const [currentQuestion, setCurrentQuestion] = useState<string>('');\r\n    const [currentAnswer, setCurrentAnswer] = useState<string>('');\r\n    const token = getItemFromLS('token');\r\n\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.signIn.isAuth);\r\n    const isLoading = useSelector<AppStateType, boolean>(state => state.signUp.isLoading);\r\n    const cards = useSelector<AppStateType, Array<CardItemType>>(state => state.cards.cards);\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n\r\n    const {packId} = useParams();\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (firstRendering && token && isAuth) {\r\n            setFirstRendering(false);\r\n            dispatch(getCards(token, packId));\r\n        }\r\n    }, [dispatch, token, setFirstRendering, firstRendering, isAuth, packId]);\r\n\r\n    const showModal = useCallback((modalType: string, cardId?: string, question?: string, answer?: string) => {\r\n        setModalType(modalType);\r\n        cardId && setCurrentCardId(cardId);\r\n        question && setCurrentQuestion(question);\r\n        answer && setCurrentAnswer(answer);\r\n    }, [setModalType, setCurrentCardId, setCurrentAnswer, setCurrentQuestion]);\r\n\r\n    const onGetCards = useCallback((sortParams: string) => {\r\n        token && dispatch(getCards(token, packId, `sortCards=${sortParams}`))\r\n    }, [dispatch, token, packId]);\r\n\r\n    const onChangeCard = useCallback((question: string, answer: string) => {\r\n        token && dispatch(changeCard(currentCardId, token, question, answer));\r\n    }, [dispatch, token, currentCardId]);\r\n\r\n    const onAddCard = useCallback((question: string, answer: string) => {\r\n        token && dispatch(addCard(token, packId, question, answer ))\r\n    }, [dispatch, token, packId]);\r\n\r\n    const onDeletePack = useCallback((cardId: string) => {\r\n        token && dispatch(deleteCard(cardId, token))\r\n    }, [dispatch, token]);\r\n\r\n    const hideModal = useCallback( () => {\r\n        setModalType('');\r\n    }, []);\r\n\r\n\r\n    if (!isAuth) return <Redirect to={SIGN_IN_PATH}/>;\r\n\r\n    return <>\r\n        <Table columnsHeaders={headers} rows={cards} getItems={onGetCards}\r\n               tableModel={'cards'} showModal={showModal}/>\r\n        <MessageModal messageText={messageText} isResponseError={true}\r\n                      actionCreator={setMessageText('')}/>\r\n        <AddCardModal modalType={modalType} addCard={onAddCard} hideModal={hideModal} />\r\n        <ChangeCardModal modalType={modalType} hideModal={hideModal} changeCard={onChangeCard}\r\n                         currentQuestion={currentQuestion} currentAnswer={currentAnswer} />\r\n\r\n        {isLoading && <Loading/>}\r\n    </>\r\n};","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport {SignInContainer} from '../../../features/Sign-In/UI/SignInContainer';\r\nimport {SignUpContainer} from '../../../features/Sign-Up/UI/SignUp';\r\nimport {SetNewPassContainer} from '../../../features/Set-New-Pass/UI/SetNewPassContainer';\r\nimport {Profile} from '../../../features/Profile/Profile';\r\nimport {ForgotContainer} from '../../../features/Forgot/UI/ForgotContainer';\r\nimport {Packs} from '../../../features/Packs/UI/Packs';\r\nimport {Cards} from '../../../features/Cards/UI/Cards';\r\n\r\nexport const SIGN_IN_PATH = '/sign-in';\r\nexport const SIGN_UP_PATH = '/sign-up';\r\nexport const FORGOT_PATH = '/forgot';\r\nexport const SET_NEW_PASS_PATH = '/set-new-password';\r\nexport const PROFILE_PATH = '/profile';\r\nexport const PACKS_PATH = '/packs';\r\nexport const CARDS_PATH = '/cards';\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={SIGN_IN_PATH} render={() => <SignInContainer/>}/>\r\n            <Route path={SIGN_UP_PATH} render={() => <SignUpContainer/>}/>\r\n            <Route path={FORGOT_PATH} render={() => <ForgotContainer/>}/>\r\n            <Route path={`${SET_NEW_PASS_PATH}/:resetToken?`} render={() => <SetNewPassContainer/>}/>\r\n            <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n            <Route path={PACKS_PATH} render={() => <Packs/>}/>\r\n            <Route path={`${CARDS_PATH}/:packId?`} render={() => <Cards/>}/>\r\n            <Redirect exact path={'/'} to={SIGN_IN_PATH}/>\r\n            <Route path={'*'} render={() => <h2> 404 ERROR PAGE NOT FOUND</h2>}/>\r\n        </Switch>\r\n    )\r\n};","import React from 'react';\r\nimport styles from './Header.module.scss';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {\r\n    SIGN_IN_PATH, SIGN_UP_PATH, FORGOT_PATH,\r\n    SET_NEW_PASS_PATH, PROFILE_PATH, PACKS_PATH\r\n} from '../Routes/Routes';\r\nimport {Button} from '../common/Button/Button';\r\nimport {setItemToLS} from '../../../features/Sign-In/LS-service/localStorage';\r\nimport {loginSuccess, setUserData} from '../../../features/Sign-In/BLL/signInReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../BLL/store';\r\n\r\nexport const Header = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.signIn.isAuth);\r\n\r\n    const signOut = () => {\r\n        setItemToLS('token', null);\r\n        dispatch(setUserData(null));\r\n        dispatch(loginSuccess(false));\r\n    };\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <nav className={styles.navMenu}>\r\n                <NavLink to={SIGN_IN_PATH} activeClassName={styles.active}>Sign In</NavLink>\r\n                <NavLink to={SIGN_UP_PATH} activeClassName={styles.active}>Sign Up</NavLink>\r\n                <NavLink to={FORGOT_PATH} activeClassName={styles.active}>Forgot</NavLink>\r\n                <NavLink to={SET_NEW_PASS_PATH} activeClassName={styles.active}>Set New Password</NavLink>\r\n                <NavLink to={PROFILE_PATH} activeClassName={styles.active}>Profile</NavLink>\r\n                <NavLink to={PACKS_PATH} activeClassName={styles.active}>Packs</NavLink>\r\n            </nav>\r\n            {\r\n                isAuth && <div className={styles.signOut}>\r\n                    <Button title={'Sign Out'} onClick={signOut}/>\r\n                </div>\r\n            }\r\n        </header>\r\n    )\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from './main/UI/Header/Header';\r\nimport {Routes} from './main/UI/Routes/Routes';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('MessageModal during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {SingUpReducer} from '../../features/Sign-Up/BLL/SignUpReducer';\r\nimport { signInReducer } from '../../features/Sign-In/BLL/signInReducer';\r\nimport {forgotReducer} from '../../features/Forgot/BLL/forgotReducer';\r\nimport {setNewPassReducer} from '../../features/Set-New-Pass/BLL/setNewPassReducer';\r\nimport { appReducer } from './appReducer';\r\nimport {packsReducer} from '../../features/Packs/BLL/packsReducer';\r\nimport {cardsReducer} from '../../features/Cards/BLL/cardsReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    signUp: SingUpReducer,\r\n    signIn: signInReducer,\r\n    forgot: forgotReducer,\r\n    setNewPass: setNewPassReducer,\r\n    packs: packsReducer,\r\n    cards: cardsReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport { store } from './main/BLL/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
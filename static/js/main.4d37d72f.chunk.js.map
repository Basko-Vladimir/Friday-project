{"version":3,"sources":["main/UI/Header/Header.module.css","main/UI/common/Message/Message.module.scss","features/Sign-In/UI/SignIn.module.scss","main/UI/common/LoadingToggle/Loading.module.scss","features/Sign-Up/UI/SignUp.module.scss","main/UI/common/NewInput/NewInput.module.scss","main/UI/common/Button/Button.module.css","main/UI/common/Input/Input.module.css","features/Set-New-Pass/UI/SetNewPass.module.scss","features/Forgot/UI/Forgot.module.scss","features/Sign-In/DAL/signInAPI.ts","features/Sign-In/LS-service/localStorage.ts","main/BLL/appReducer.ts","features/Sign-In/BLL/signInReducer.ts","main/UI/common/NewInput/NewInput.tsx","main/UI/common/Button/Button.tsx","main/UI/common/Message/Message.tsx","features/Sign-In/UI/SignIn.tsx","features/Sign-In/UI/SignInContainer.tsx","main/UI/common/Input/Input.tsx","features/Sign-Up/BLL/SignUpTypes.ts","features/Sign-Up/DAL/SignUpAPI.ts","features/Sign-Up/BLL/SignUpReducer.ts","main/UI/common/LoadingToggle/Loading.tsx","features/Sign-Up/UI/SignUp.tsx","features/Set-New-Pass/UI/SetNewPass.tsx","features/Set-New-Pass/DAL/setNewPassAPI.ts","features/Set-New-Pass/BLL/setNewPassReducer.ts","features/Set-New-Pass/UI/SetNewPassContainer.tsx","features/Profile/Profile.tsx","features/Forgot/UI/Forgot.tsx","features/Forgot/DAL/forgotAPI.ts","features/Forgot/BLL/forgotReducer.ts","features/Forgot/UI/ForgotContainer.tsx","main/UI/Routes/Routes.tsx","main/UI/Header/Header.tsx","App.tsx","serviceWorker.ts","main/BLL/store.ts","index.tsx"],"names":["module","exports","instance","axios","create","baseURL","authAPI","email","password","rememberMe","post","then","res","data","token","setItemToLS","key","value","localStorage","setItem","JSON","stringify","getItemFromLS","getItem","parse","SET_MESSAGE_TEXT","initialState","message","setMessageText","messageText","type","SET_USER_DATA","LOGIN_SUCCESS","isAuth","userData","setUserData","loginSuccess","setAuthMe","dispatch","a","console","log","response","error","NewInput","React","memo","props","className","styles","input","Button","title","button","Message","isResponseError","actionCreator","messageClass","useDispatch","background","onClick","SignIn","isRemember","changePass","changeEmail","changeIsRemember","sendFormData","onSubmit","form","placeholder","onChange","to","FORGOT_PATH","forgotLink","checkbox","checked","SIGN_UP_PATH","SignInContainer","useSelector","state","app","signIn","useState","setEmail","setPassword","setIsRemember","useEffect","useCallback","e","currentTarget","preventDefault","login","PROFILE_PATH","Input","changeInput","SIGN_UP_ERROR","IS_LOADING","SignUpAPI","isLoading","signUpSuccess","SignUpError","errorMessage","Loading","points","setPoints","signUp","s","body","hide","loadingProgress","setTimeout","length","SignUp","firstPass","secondPass","setFirstPass","setLogin","setSecondPass","registerMe","similar","wrongPassword","responseMessage","container","inputs","SignUpContainer","setSimilar","SIGN_IN_PATH","success","SetNewPass","passwordRepeat","sendNewPassword","changePassword","changePasswordRepeat","setNewPassAPI","resetPasswordToken","SET_NEW_PASS_SUCCESS","newPassSuccess","SetNewPassContainer","setPasswordRepeat","setNewPass","resetToken","useParams","isSuccess","setNewPassword","Profile","created","String","isAdmin","name","publicCardPacksCount","tokenDeathTime","updated","verified","__v","_id","Forgot","sendEmail","forgotAPI","html1","html2","SET_FORGOT_SUCCESS","forgotSuccess","ForgotContainer","forgot","onSendEmail","Routes","path","render","exact","Header","header","navMenu","activeClassName","active","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.4d37d72f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1L4zS\",\"navMenu\":\"Header_navMenu__11Gnm\",\"active\":\"Header_active__2mxZT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"background\":\"Message_background__1_Cvs\",\"message\":\"Message_message__2OSW_\",\"error\":\"Message_error__j9aN1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SignIn_form__o7Htx\",\"checkbox\":\"SignIn_checkbox__3Ub6U\",\"background\":\"SignIn_background__11NxE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"Loading_body__5qWIK\",\"loadingProgress\":\"Loading_loadingProgress__149ZI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SignUp_container__29LBU\",\"inputs\":\"SignUp_inputs__1TLkz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"NewInput_input__2Agb1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2xiU3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3ZTlA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"SetNewPass_form__JPazo\",\"background\":\"SetNewPass_background__1F51k\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Forgot_form__2ccYz\",\"background\":\"Forgot_background__3Hif5\"};","import axios from 'axios';\r\nimport {UserDataType} from '../types/ResponseSuccessTypes';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\n\r\nexport const authAPI = {\r\n    login (email: string, password: string, rememberMe: boolean = false ) {\r\n        return instance.post<UserDataType>('/auth/login', {email, password, rememberMe})\r\n            .then(res => res.data)\r\n    },\r\n\r\n    authMe (token: string) {\r\n       return instance.post<UserDataType>('/auth/me', {token})\r\n            .then(res => res.data);\r\n    }\r\n};\r\n","\r\n\r\nexport const setItemToLS = (key: string, value: any) => {\r\n   localStorage.setItem(key, JSON.stringify(value));\r\n};\r\n\r\nexport const getItemFromLS= (key: string): string | undefined => {\r\n    const value = localStorage.getItem(key);\r\n    if (value) return JSON.parse(value);\r\n};","\r\nconst SET_MESSAGE_TEXT = 'cards/signInReducer/SET_MESSAGE_TEXT';\r\n\r\nconst initialState = {\r\n    message: ''\r\n};\r\n\r\nexport type StateType = typeof initialState;\r\n\r\nexport const appReducer = (state: StateType = initialState, action: SetMessageTextType): StateType => {\r\n    switch (action.type) {\r\n        case SET_MESSAGE_TEXT:\r\n            return {\r\n                ...state,\r\n                message: action.messageText\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport type SetMessageTextType = ReturnType<typeof setMessageText>;\r\nexport const setMessageText = (messageText: string) => ({type: SET_MESSAGE_TEXT, messageText} as const);\r\n\r\n\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../DAL/signInAPI';\r\nimport {UserDataType} from '../types/ResponseSuccessTypes';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {setItemToLS} from '../LS-service/localStorage';\r\nimport {SetMessageTextType, setMessageText} from '../../../main/BLL/appReducer';\r\n\r\nconst SET_USER_DATA = 'cards/signInReducer/SET_USER_DATA';\r\nconst LOGIN_SUCCESS = 'cards/signInReducer/LOGIN_SUCCESS';\r\n\r\nconst initialState = {\r\n    isAuth: false,\r\n    userData: null as UserDataType | null,\r\n};\r\n\r\nexport type StateType = typeof initialState;\r\n\r\nexport const signInReducer = (state: StateType = initialState, action: ActionsTypes): StateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                userData: action.userData\r\n            };\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsTypes = SetUserDataType | LoginSuccessType | SetMessageTextType;\r\n\r\ntype SetUserDataType = ReturnType<typeof setUserData>\r\nexport const setUserData = (userData: UserDataType | null) => ({type: SET_USER_DATA, userData} as const);\r\n\r\ntype LoginSuccessType = ReturnType<typeof loginSuccess>;\r\nexport const loginSuccess = (isAuth: boolean) => ({type: LOGIN_SUCCESS, isAuth} as const);\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const login = (email: string, password: string, isRemember: boolean): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const data = await authAPI.login(email, password, isRemember);\r\n            setItemToLS('token', data.token);\r\n            dispatch(setUserData({...data}));\r\n            dispatch(loginSuccess(true));\r\n        } catch (err) {\r\n            dispatch(setMessageText(err.response.data.error))\r\n        }\r\n    };\r\n};\r\n\r\nexport const setAuthMe = (token: string) => async (dispatch: Dispatch<ActionsTypes>) => {\r\n    try {\r\n        const data = await authAPI.authMe(token);\r\n        setItemToLS('token', data.token);\r\n        dispatch(setUserData({...data}));\r\n        dispatch(loginSuccess(true));\r\n    } catch (err) {\r\n        console.log(err.response.data.error);\r\n    }\r\n};\r\n\r\n\r\n\r\n","import React, {InputHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styles from './NewInput.module.scss';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement> & { error?: string }\r\n\r\nexport const NewInput: React.FC<InputPropsType> = React.memo(({error, ...props}) => {\r\n    return (\r\n        <>\r\n            <input className={styles.input} {...props}/>\r\n            {error && <span>{error}</span>}\r\n        </>\r\n    )\r\n});\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport styles from './Button.module.css';\r\n\r\nexport type ButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>,\r\n    HTMLButtonElement> & { title: string };\r\n\r\nexport const Button: React.FC<ButtonPropsType> = React.memo(({title, ...props}) => {\r\n    return (\r\n        <div>\r\n            <button className={styles.button} {...props}>{title}</button>\r\n        </div>\r\n    )\r\n});\r\n","import React from 'react';\r\nimport styles from './Message.module.scss';\r\nimport {Button} from '../Button/Button';\r\nimport {useDispatch} from 'react-redux';\r\nimport {SetMessageTextType} from '../../../BLL/appReducer';\r\n\r\ntype MessagePropsType = {\r\n    messageText: string\r\n    isResponseError: boolean\r\n    actionCreator: SetMessageTextType\r\n}\r\n\r\nexport const Message: React.FC<MessagePropsType> = React.memo((props) => {\r\n    const {messageText, isResponseError, actionCreator} = props;\r\n    const messageClass = isResponseError ? `${styles.message} ${styles.error} ` : styles.message;\r\n    const dispatch = useDispatch();\r\n\r\n    const closeMessage = () => {\r\n        dispatch(actionCreator)\r\n    };\r\n\r\n    return <>\r\n        <div className={styles.background}> </div>\r\n        <div className={messageClass}>\r\n            <h3>{messageText}</h3>\r\n            <Button title={'Close'} onClick={closeMessage}/>\r\n        </div>\r\n    </>\r\n});","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport styles from './SignIn.module.scss';\r\nimport {NewInput} from '../../../main/UI/common/NewInput/NewInput';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {FORGOT_PATH, SIGN_UP_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport {Message} from '../../../main/UI/common/Message/Message';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\n\r\ntype SignInPropsType = {\r\n    email: string\r\n    password: string\r\n    isRemember: boolean\r\n    messageText: string\r\n    changeEmail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changePass: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changeIsRemember: (e: ChangeEvent<HTMLInputElement>) => void\r\n    sendFormData: (e: FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\nexport const SignIn: React.FC<SignInPropsType> = React.memo((props) => {\r\n    const {\r\n        email, password, isRemember, messageText, changePass,\r\n        changeEmail, changeIsRemember, sendFormData\r\n    } = props;\r\n    return (\r\n        <div>\r\n            <h1>Sign In</h1>\r\n            <form onSubmit={sendFormData} className={styles.form}>\r\n                <NewInput type={'text'} placeholder={'Enter your e-mail'}\r\n                          onChange={changeEmail} value={email}/>\r\n                <NewInput type={'password'} placeholder={'Enter your password'}\r\n                          onChange={changePass} value={password}/>\r\n                <NavLink to={FORGOT_PATH} className={styles.forgotLink}>Forgot password?</NavLink>\r\n                <label>\r\n                    <NewInput type={'checkbox'} className={styles.checkbox}\r\n                              onChange={changeIsRemember} checked={isRemember}/>Remember Me\r\n                </label>\r\n                <Button title={'Sign in'}/>\r\n                <NavLink to={SIGN_UP_PATH}>Registration</NavLink>\r\n                {\r\n                    messageText && <Message messageText={messageText} isResponseError={true}\r\n                                            actionCreator={setMessageText('')}/>\r\n                }\r\n            </form>\r\n        </div>\r\n    )\r\n});","import React, {ChangeEvent, FormEvent, useCallback, useEffect, useState} from 'react';\r\nimport {PROFILE_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {login, setAuthMe} from '../BLL/signInReducer';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {SignIn} from './SignIn';\r\nimport {getItemFromLS} from '../LS-service/localStorage';\r\n\r\nexport const SignInContainer = () => {\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.signIn.isAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    const [email, setEmail] = useState<string>('');\r\n    const [password, setPassword] = useState<string>('');\r\n    const [isRemember, setIsRemember] = useState<boolean>(false);\r\n\r\n\r\n    useEffect( () => {\r\n        const token = getItemFromLS('token');\r\n        token && dispatch(setAuthMe(token));\r\n    },[dispatch]);\r\n\r\n    const changeEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const changePass = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }, [setPassword]);\r\n\r\n    const changeIsRemember = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setIsRemember(e.currentTarget.checked)\r\n    }, [setIsRemember]);\r\n\r\n    const sendFormData = useCallback((e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(login(email, password, isRemember));\r\n        setEmail('');\r\n        setPassword('');\r\n        setIsRemember(false);\r\n    }, [dispatch, email, password, isRemember]);\r\n\r\n    if (isAuth) return <Redirect to={PROFILE_PATH}/>;\r\n\r\n    return <SignIn email={email} password={password} isRemember={isRemember}\r\n                   changeEmail={changeEmail} changePass={changePass} messageText={messageText}\r\n                   changeIsRemember={changeIsRemember} sendFormData={sendFormData}/>\r\n};\r\n\r\n","import React, {InputHTMLAttributes, DetailedHTMLProps, ChangeEvent} from 'react';\r\nimport styles from './Input.module.css';\r\n\r\nexport type InputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>,\r\n    HTMLInputElement> & { error?: string, value?: string, changeInput?: (e:ChangeEvent<HTMLInputElement>) => void }\r\n\r\nexport const Input: React.FC<InputPropsType> = ({error, value, changeInput, ...props}) => {\r\n    return (\r\n        <>\r\n            <input className={styles.input} {...props} value={value} onChange={changeInput} />\r\n            {error && <span>{error}</span>}\r\n        </>\r\n    )\r\n};\r\n","import React from \"react\";\r\n\r\n\r\nexport const SIGN_UP_SUCCESS = 'SignUpReducer/SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_ERROR = 'SignUpReducer/SIGN_UP_ERROR';\r\nexport const IS_LOADING = 'SignUpReducer/IS_LOADING';\r\n\r\n// Типизация SignUp.tsx\r\nexport type SignUpPropsType = {\r\n    login: string\r\n    setLogin: (value: string) => void\r\n    firstPass: string\r\n    setFirstPass: (value: string) => void\r\n    secondPass: string\r\n    setSecondPass: (value: string) => void\r\n    similar: boolean\r\n    registerMe: (e: React.MouseEvent) => void\r\n    responseMessage: string\r\n    wrongPassword: (e: React.MouseEvent) => void\r\n    isLoading: (value: boolean) => IsLoadingACType\r\n}\r\n\r\n\r\n\r\nexport type SignUpSuccessType = {\r\n    type: typeof SIGN_UP_SUCCESS\r\n    signUpSuccess: boolean\r\n}\r\nexport type SignUpErrorType = {\r\n    type: typeof SIGN_UP_ERROR\r\n    errorMessage: string\r\n}\r\nexport type IsLoadingACType = {\r\n    type: typeof IS_LOADING\r\n    value: boolean\r\n}\r\n\r\n\r\n\r\n\r\nexport type ChatActionTypes = SignUpSuccessType | SignUpErrorType | IsLoadingACType","import axios from \"axios\";\r\n\r\nexport const baseURL = 'https://cards-nya-back.herokuapp.com/1.0/';\r\n\r\nexport const instance = axios.create({\r\n    baseURL\r\n});\r\n\r\nexport type SignUpType =  {\r\n    success: boolean\r\n    error: string\r\n}\r\n\r\nexport const SignUpAPI = {\r\n    SignUpAPI: async (email: string, password: string) => {\r\n        const response = await instance.post<SignUpType>('/auth/register', {email, password});\r\n        return response.data;\r\n    }\r\n\r\n};","import {\r\n    ChatActionTypes, IS_LOADING,\r\n    IsLoadingACType,\r\n    SIGN_UP_ERROR,\r\n    SIGN_UP_SUCCESS,\r\n    SignUpErrorType,\r\n    SignUpSuccessType\r\n} from \"./SignUpTypes\";\r\nimport {Dispatch} from \"redux\";\r\nimport {SignUpAPI} from \"../DAL/SignUpAPI\";\r\n\r\n\r\nconst initialState = {\r\n    isLoading: false,\r\n    message: '',\r\n    signUpSuccess: false\r\n};\r\n\r\ntype StateType = typeof initialState;\r\n\r\nexport const SingUpReducer = (state: StateType = initialState, action: any): StateType => {\r\n    switch (action.type) {\r\n        case SIGN_UP_SUCCESS:\r\n            return {...state, message: 'done!', signUpSuccess: action.signUpSuccess};\r\n        case SIGN_UP_ERROR:\r\n            return {...state, message: action.errorMessage};\r\n        case IS_LOADING:\r\n            return {\r\n                ...state, isLoading: action.value\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\n// Action Creators\r\nexport const isLoading = (value: boolean):IsLoadingACType => ({type: IS_LOADING, value});\r\n\r\nconst SignUpSuccess = (signUpSuccess: boolean)\r\n    : SignUpSuccessType => ({type: SIGN_UP_SUCCESS, signUpSuccess});\r\nexport const SignUpError = (errorMessage: string)\r\n    : SignUpErrorType => ({type: SIGN_UP_ERROR, errorMessage});\r\n\r\n// Thunks\r\n\r\nexport const signUpTC = (email:string, password:string) =>\r\n    async(dispatch: Dispatch<ChatActionTypes>)  => {\r\n    debugger\r\n        try {\r\n            dispatch(isLoading(true));\r\n            const data = await SignUpAPI.SignUpAPI(email, password);\r\n            if(data.error) {\r\n                dispatch(SignUpError(data.error));\r\n            } else\r\n                dispatch(SignUpSuccess(data.success))\r\n        } catch (e) {\r\n            dispatch(SignUpError(e.response.data.error))\r\n        }\r\n        dispatch(isLoading(false));\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport s from './Loading.module.scss'\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../../BLL/store\";\r\n\r\n\r\nconst Loading = () => {\r\n    let [points, setPoints] = useState<string>('.');\r\n    let isLoading = useSelector((state: AppStateType) => state.signUp.isLoading);\r\n    const loadingProgress = () => {\r\n        setTimeout(() => {\r\n            points.length < 5\r\n                ? setPoints(points + '.')\r\n                : setPoints('.')\r\n        }, 1000);\r\n        return points\r\n    };\r\n    return (\r\n        <div className={isLoading ? s.body : s.hide}>\r\n            <span className={s.loadingProgress}>\r\n                {isLoading && 'Loading' + loadingProgress()}\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {Input} from '../../../main/UI/common/Input/Input';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport s from './SignUp.module.scss';\r\nimport {AppStateType} from \"../../../main/BLL/store\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {isLoading, SignUpError, signUpTC} from \"../BLL/SignUpReducer\";\r\nimport Loading from \"../../../main/UI/common/LoadingToggle/Loading\";\r\nimport {SignUpPropsType} from \"../BLL/SignUpTypes\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {SIGN_IN_PATH} from \"../../../main/UI/Routes/Routes\";\r\n\r\n\r\n\r\n\r\nexport const SignUp: React.FC<SignUpPropsType> = ({login, firstPass,\r\n                                                      secondPass,\r\n                                                      setFirstPass, setLogin, setSecondPass,\r\n                                                      registerMe, similar,\r\n                                                      wrongPassword, responseMessage, isLoading}) => {\r\n    const setEmailCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setLogin(e.currentTarget.value)\r\n    };\r\n    const setPassCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setFirstPass(e.currentTarget.value)\r\n    };\r\n    const setConfirmPassCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSecondPass(e.currentTarget.value)\r\n    };\r\n    return (\r\n        <div className={s.container}>\r\n            <h1>Sign Up</h1>\r\n\r\n            <div className={s.inputs}>\r\n                <Input placeholder={'Enter Your email'} changeInput={setEmailCallback}\r\n                        type='text' value={login}\r\n                />\r\n                <Input placeholder={'Enter Your Password'} changeInput={setPassCallback}\r\n                        type='password' value={firstPass}\r\n                />\r\n                <Input placeholder={'Confirm Your password'} changeInput={setConfirmPassCallback}\r\n                        type='password' value={secondPass}\r\n                /> {!similar && <span>password does not match!</span>}\r\n            </div>\r\n\r\n            <Button title={'Sign Up'} onClick={similar? registerMe : wrongPassword} />\r\n            {isLoading && <Loading/>}\r\n            {<span>{responseMessage}</span>}\r\n        </div>\r\n    )\r\n};\r\nexport const SignUpContainer = () => {\r\n    const dispatch = useDispatch();\r\n    const {signUpSuccess, message} = useSelector((state: AppStateType) => state.signUp);\r\n    const [login, setLogin] = useState('');\r\n    const [similar, setSimilar] = useState<boolean>(false);\r\n    const [firstPass, setFirstPass] = useState<string>('');\r\n    const [secondPass, setSecondPass] = useState<string>('');\r\n    useEffect(() => {\r\n        if (secondPass === firstPass && secondPass) setSimilar(true);\r\n        else setSimilar(false)\r\n    }, [secondPass, firstPass]);\r\n    const registerMe = () => {\r\n        dispatch(signUpTC(login, firstPass))\r\n    };\r\n    const wrongPassword = () => {\r\n        dispatch(SignUpError('wrong credentials'))\r\n    };\r\n\r\n    return(\r\n        <>\r\n            { !signUpSuccess ?\r\n                <SignUp login={login} setLogin={setLogin}\r\n                    firstPass={firstPass} setFirstPass={setFirstPass}\r\n                    secondPass={secondPass} setSecondPass={setSecondPass}\r\n                    similar={similar} registerMe={registerMe}\r\n                    responseMessage={message} wrongPassword={wrongPassword}\r\n                    isLoading={isLoading}\r\n            />\r\n            : <Redirect to={SIGN_IN_PATH}/>\r\n            }\r\n        </>\r\n    )\r\n};\r\n\r\n\r\n","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport styles from './SetNewPass.module.scss';\r\nimport {NewInput} from '../../../main/UI/common/NewInput/NewInput';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport {Message} from '../../../main/UI/common/Message/Message';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\n\r\ntype SetNewPassPropsType = {\r\n    password: string\r\n    passwordRepeat: string\r\n    sendNewPassword: (e: FormEvent<HTMLFormElement>) => void\r\n    changePassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    changePasswordRepeat: (e: ChangeEvent<HTMLInputElement>) => void\r\n    messageText: string\r\n    isResponseError: boolean\r\n}\r\n\r\nexport const SetNewPass: React.FC<SetNewPassPropsType> = React.memo( (props) => {\r\n    const {password, passwordRepeat, sendNewPassword, changePassword,\r\n        changePasswordRepeat, messageText, isResponseError} = props;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Set New Password</h1>\r\n            <form className={styles.form} onSubmit={sendNewPassword}>\r\n                <NewInput value={password} placeholder={'Enter new password'}\r\n                          onChange={changePassword} type={'password'}/>\r\n                <NewInput value={passwordRepeat} placeholder={'Repeat password'}\r\n                          onChange={changePasswordRepeat} type={'password'}/>\r\n                <NavLink to={SIGN_IN_PATH}>Sign In</NavLink>\r\n                <Button title={'Set password'}/>\r\n            </form>\r\n            {\r\n                messageText && <Message messageText={messageText} isResponseError={isResponseError}\r\n                                        actionCreator={setMessageText('')} />\r\n            }\r\n        </div>\r\n    )\r\n});","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\n\r\nexport const setNewPassAPI = {\r\n    setNewPass (password: string, resetPasswordToken: string = '') {\r\n        return instance.post<{success: boolean}>('/auth/set-new-password', {password, resetPasswordToken})\r\n            .then(res => res.data)\r\n    }\r\n};","import { Dispatch } from \"redux\";\r\nimport {setNewPassAPI} from '../DAL/setNewPassAPI';\r\nimport { setMessageText } from \"../../../main/BLL/appReducer\";\r\n\r\nconst SET_NEW_PASS_SUCCESS = 'cards/setNewPassReducer/setNewPassReducer';\r\n\r\nconst initialState = {\r\n    newPassSuccess: false\r\n};\r\n\r\ntype StateType = typeof initialState;\r\n\r\nexport const setNewPassReducer = (state:StateType = initialState, action: setNewPassSuccessType): StateType => {\r\n    switch (action.type) {\r\n        case SET_NEW_PASS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                newPassSuccess: action.isSuccess\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype setNewPassSuccessType = ReturnType<typeof setNewPassSuccess>;\r\nconst setNewPassSuccess = (isSuccess: boolean) => ({type: SET_NEW_PASS_SUCCESS, isSuccess} as const);\r\n\r\nexport const setNewPassword = (password: string, token: string) => async (dispatch: Dispatch) => {\r\n    try {\r\n        await setNewPassAPI.setNewPass(password, token);\r\n        dispatch(setNewPassSuccess(true));\r\n        dispatch(setMessageText('Success! Password changed'));\r\n    } catch (err) {\r\n        dispatch(setMessageText(err.response.data.error));\r\n    }\r\n\r\n};","import React, {ChangeEvent, FormEvent, useCallback, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport {SetNewPass} from './SetNewPass';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\nimport { Redirect, useParams } from 'react-router-dom';\r\nimport { setNewPassword } from '../BLL/setNewPassReducer';\r\nimport {setMessageText} from '../../../main/BLL/appReducer';\r\n\r\nexport const SetNewPassContainer = () => {\r\n    const [password, setPassword] = useState<string>('');\r\n    const [passwordRepeat, setPasswordRepeat] = useState<string>('');\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n    const newPassSuccess = useSelector<AppStateType, boolean>(state => state.setNewPass.newPassSuccess);\r\n    const dispatch = useDispatch();\r\n    const {resetToken} = useParams();\r\n\r\n    console.log(resetToken);\r\n\r\n    const changePassword = useCallback( (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }, [setPassword]);\r\n\r\n    const changePasswordRepeat = useCallback( (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPasswordRepeat(e.currentTarget.value)\r\n    }, [setPasswordRepeat]);\r\n\r\n    const sendNewPassword = useCallback( (e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        if (password === passwordRepeat){\r\n            dispatch(setNewPassword(password, resetToken))\r\n        } else {\r\n            dispatch(setMessageText('Passwords doesn\\'t match'))\r\n        }\r\n        setPassword('');\r\n        setPasswordRepeat('');\r\n    }, [dispatch, password, passwordRepeat, resetToken]);\r\n\r\n    if (newPassSuccess) return <Redirect to={SIGN_IN_PATH}/>;\r\n\r\n    return <SetNewPass password={password} passwordRepeat={passwordRepeat}\r\n                                sendNewPassword={sendNewPassword} changePassword={changePassword}\r\n                                changePasswordRepeat={changePasswordRepeat} messageText={messageText}\r\n                                isResponseError={!newPassSuccess} />\r\n};\r\n\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppStateType} from '../../main/BLL/store';\r\nimport {UserDataType} from '../Sign-In/types/ResponseSuccessTypes';\r\nimport {loginSuccess, setAuthMe, setUserData} from '../Sign-In/BLL/signInReducer';\r\nimport {Button} from '../../main/UI/common/Button/Button';\r\nimport { Redirect } from 'react-router-dom';\r\nimport {SIGN_IN_PATH} from '../../main/UI/Routes/Routes';\r\nimport {getItemFromLS, setItemToLS} from '../Sign-In/LS-service/localStorage';\r\n\r\nexport const Profile = () => {\r\n    const userData = useSelector<AppStateType, UserDataType | null>(state => state.signIn.userData);\r\n    const isAuth = useSelector<AppStateType, boolean>(state => state.signIn.isAuth);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        const token = getItemFromLS('token');\r\n        token && dispatch(setAuthMe(token));\r\n    }, [dispatch]);\r\n\r\n    const signOut = () => {\r\n        setItemToLS('token', '');\r\n        dispatch(setUserData(null));\r\n        dispatch(loginSuccess(false));\r\n    };\r\n\r\n    if (!isAuth) return <Redirect to={SIGN_IN_PATH}/>;\r\n\r\n    return (\r\n        <div>\r\n            <h1>Profile </h1>\r\n            <div><b>created:</b> {userData?.created}</div>\r\n            <div><b>email:</b> {userData?.email}</div>\r\n            <div><b>isAdmin:</b> {String(userData?.isAdmin)}</div>\r\n            <div><b>name:</b> {userData?.name}</div>\r\n            <div><b>publicCardPacksCount:</b> {userData?.publicCardPacksCount}</div>\r\n            <div><b>rememberMe:</b> {String(userData?.rememberMe)}</div>\r\n            <div><b>success:</b> {String(userData?.success)}</div>\r\n            <div><b>token:</b> {userData?.token}</div>\r\n            <div><b>tokenDeathTime:</b> {userData?.tokenDeathTime}</div>\r\n            <div><b>updated:</b> {userData?.updated}</div>\r\n            <div><b>verified:</b> {String(userData?.verified)}</div>\r\n            <div><b>__v:</b> {userData?.__v}</div>\r\n            <div><b>_id:</b> {userData?._id}</div>\r\n            <div>\r\n                <Button title={'Sign Out'} onClick={signOut}/>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    )\r\n};","import React, {ChangeEvent, FormEvent} from 'react';\r\nimport styles from './Forgot.module.scss';\r\nimport {Button} from '../../../main/UI/common/Button/Button';\r\nimport {NewInput} from '../../../main/UI/common/NewInput/NewInput';\r\nimport {SIGN_IN_PATH} from '../../../main/UI/Routes/Routes';\r\nimport { NavLink } from 'react-router-dom';\r\nimport {Message} from '../../../main/UI/common/Message/Message';\r\nimport { setMessageText } from '../../../main/BLL/appReducer';\r\n\r\ntype ForgotPropsType = {\r\n    email: string\r\n    messageText: string\r\n    isResponseError: boolean\r\n    changeEmail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    sendEmail: (e: FormEvent<HTMLFormElement>) => void\r\n}\r\n\r\nexport const Forgot:React.FC<ForgotPropsType> = React.memo((props) => {\r\n    const {email, messageText, isResponseError, changeEmail, sendEmail} = props;\r\n    return (\r\n        <div>\r\n            <h1>Forgot</h1>\r\n            <form className={styles.form} onSubmit={sendEmail}>\r\n                <NewInput type={'text'} placeholder={'Enter your e-mail'}\r\n                          value={email} onChange={changeEmail}/>\r\n                <NavLink to={SIGN_IN_PATH}>Sign In</NavLink>\r\n                <Button title={'Send email'}/>\r\n            </form>\r\n            {\r\n                messageText && <Message messageText={messageText} isResponseError={isResponseError}\r\n                                        actionCreator={setMessageText('')}/>\r\n            }\r\n        </div>\r\n    )\r\n});","import axios from 'axios';\r\nimport {ForgotSuccessType} from '../types/ResponseSuccessTypes';\r\n\r\nconst instance = axios.create({\r\n   baseURL: 'https://cards-nya-back.herokuapp.com/1.0'\r\n});\r\n\r\nexport const forgotAPI = {\r\n    sendEmail(email: string) {\r\n        return instance.post<ForgotSuccessType>('auth/forgot', {\r\n            email: email,\r\n            html1: \"<a href='http://localhost:3000/#/set-new-password/\",\r\n            html2: \"'>reset-password-link</a>\"\r\n        })\r\n            .then(res => res.data)\r\n    }\r\n};\r\n","import {Dispatch} from 'redux';\r\nimport {forgotAPI} from '../DAL/forgotAPI';\r\nimport {setMessageText, SetMessageTextType} from '../../../main/BLL/appReducer';\r\n\r\nconst SET_FORGOT_SUCCESS = 'cards/forgotReducer/SET_FORGOT_SUCCESS';\r\n\r\nconst initialState = {\r\n    forgotSuccess: false\r\n};\r\n\r\ntype StateType = typeof initialState;\r\n\r\nexport const forgotReducer = (state: StateType = initialState, action: SetForgotSuccessType):StateType => {\r\n    switch (action.type) {\r\n        case SET_FORGOT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                forgotSuccess: action.success\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\ntype ActionsType = SetForgotSuccessType | SetMessageTextType;\r\n\r\ntype SetForgotSuccessType = ReturnType<typeof setForgotSuccess>\r\nexport const setForgotSuccess = (success: boolean) => ({type:SET_FORGOT_SUCCESS, success} as const);\r\n\r\nexport const sendEmail = (email: string) => async (dispatch: Dispatch<ActionsType>) => {\r\n    try {\r\n        await forgotAPI.sendEmail(email);\r\n        dispatch(setForgotSuccess(true));\r\n        dispatch(setMessageText('Success! Check your email'))\r\n    } catch (err) {\r\n        dispatch(setMessageText(err.response.data.error))\r\n    }\r\n};","import React, {ChangeEvent, FormEvent, useCallback, useState} from 'react';\r\nimport {Forgot} from './Forgot';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {sendEmail} from '../BLL/forgotReducer';\r\nimport {AppStateType} from '../../../main/BLL/store';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { SIGN_IN_PATH } from '../../../main/UI/Routes/Routes';\r\n\r\nexport const ForgotContainer = () => {\r\n    const [email, setEmail] = useState<string>('');\r\n    const messageText = useSelector<AppStateType, string>(state => state.app.message);\r\n    const forgotSuccess = useSelector<AppStateType, boolean>(state => state.forgot.forgotSuccess);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeEmail = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value)\r\n    }, [setEmail]);\r\n\r\n    const onSendEmail = useCallback((e: FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        dispatch(sendEmail(email));\r\n        setEmail('');\r\n    }, [dispatch, email]);\r\n\r\n    if (forgotSuccess) return <Redirect to={SIGN_IN_PATH}/>;\r\n\r\n    return <Forgot email={email} changeEmail={changeEmail} isResponseError={!forgotSuccess}\r\n                                 messageText={messageText} sendEmail={onSendEmail}/>\r\n};","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom';\r\nimport {SignInContainer} from '../../../features/Sign-In/UI/SignInContainer';\r\nimport {SignUpContainer} from '../../../features/Sign-Up/UI/SignUp';\r\nimport {SetNewPassContainer} from '../../../features/Set-New-Pass/UI/SetNewPassContainer';\r\nimport {Profile} from '../../../features/Profile/Profile';\r\nimport {ForgotContainer} from '../../../features/Forgot/UI/ForgotContainer';\r\n\r\nexport const SIGN_IN_PATH = '/sign-in';\r\nexport const SIGN_UP_PATH = '/sign-up';\r\nexport const FORGOT_PATH = '/forgot';\r\nexport const SET_NEW_PASS_PATH = '/set-new-password';\r\nexport const PROFILE_PATH = '/profile';\r\n\r\nexport const Routes = () => {\r\n    return (\r\n        <Switch>\r\n            <Route path={SIGN_IN_PATH} render={() => <SignInContainer/>}/>\r\n            <Route path={SIGN_UP_PATH} render={() => <SignUpContainer/>}/>\r\n            <Route path={FORGOT_PATH} render={() => <ForgotContainer/>}/>\r\n            <Route path={`${SET_NEW_PASS_PATH}/:resetToken?`} render={() => <SetNewPassContainer/>}/>\r\n            <Route path={PROFILE_PATH} render={() => <Profile/>}/>\r\n            <Redirect exact path={'/'} to={SIGN_IN_PATH}/>\r\n            <Route path={'*'} render={() => <h2> 404 ERROR PAGE NOT FOUND</h2>}/>\r\n        </Switch>\r\n    )\r\n};","import React from 'react';\r\nimport styles from './Header.module.css';\r\n\r\nimport {NavLink} from 'react-router-dom';\r\nimport {SIGN_IN_PATH, SIGN_UP_PATH, FORGOT_PATH, SET_NEW_PASS_PATH, PROFILE_PATH} from '../Routes/Routes';\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <header className={styles.header}>\r\n            <nav className={styles.navMenu}>\r\n                <NavLink to={SIGN_IN_PATH} activeClassName={styles.active}>Sign In</NavLink>\r\n                <NavLink to={SIGN_UP_PATH} activeClassName={styles.active}>Sign Up</NavLink>\r\n                <NavLink to={FORGOT_PATH} activeClassName={styles.active}>Forgot</NavLink>\r\n                <NavLink to={SET_NEW_PASS_PATH} activeClassName={styles.active}>Set New Password</NavLink>\r\n                <NavLink to={PROFILE_PATH} activeClassName={styles.active}>Profile</NavLink>\r\n            </nav>\r\n        </header>\r\n    )\r\n};","import React from 'react';\r\nimport './App.css';\r\nimport {Header} from './main/UI/Header/Header';\r\nimport {Routes} from './main/UI/Routes/Routes';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Routes/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Message during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport {SingUpReducer} from '../../features/Sign-Up/BLL/SignUpReducer';\r\nimport { signInReducer } from '../../features/Sign-In/BLL/signInReducer';\r\nimport {forgotReducer} from '../../features/Forgot/BLL/forgotReducer';\r\nimport {setNewPassReducer} from '../../features/Set-New-Pass/BLL/setNewPassReducer';\r\nimport { appReducer } from './appReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    signUp: SingUpReducer,\r\n    signIn: signInReducer,\r\n    forgot: forgotReducer,\r\n    setNewPass: setNewPassReducer\r\n});\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Provider} from 'react-redux';\r\nimport { store } from './main/BLL/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}